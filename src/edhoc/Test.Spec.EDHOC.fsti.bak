module Test.Spec.EDHOC

open FStar.List.Tot

module HACLRandom = Lib.RandomSequence

open Lib.IntTypes
open Lib.RawIntTypes
open Lib.ByteSequence
open Lib.Sequence

open Spec.EDHOC.CommonPred
open Spec.EDHOC.Core
open Spec.EDHOC.Base.Definitions
open Spec.EDHOC.CryptoPrimitives
open Spec.EDHOC.Parser

/// Constants
inline_for_extraction
let chosen_method = SigSig
let chosen_ciphersuite = get_cipherSuite 6

(*-------------------------------------------*)
(*----------------------Test vector 1: SigSig | CipherSuite 7*)
(*-------------------------------------------*)

inline_for_extraction noextract
let tv1_suite = 7

inline_for_extraction noextract
let tv1_method = method_as_nat SigSig

inline_for_extraction noextract
let tv1_x_raw: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x36uy;
		0x8euy; 0xc1uy; 0xf6uy; 0x9auy; 0xebuy; 0x65uy; 0x9buy; 0xa3uy;
		0x7duy; 0x5auy; 0x8duy; 0x45uy; 0xb2uy; 0x1buy; 0xdcuy; 0x02uy;
		0x99uy; 0xdcuy; 0xeauy; 0xa8uy; 0xefuy; 0x23uy; 0x5fuy; 0x3cuy;
		0xa4uy; 0x2cuy; 0xe3uy; 0x53uy; 0x0fuy; 0x95uy; 0x25uy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_g_x_raw: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x8auy;
		0xf6uy; 0xf4uy; 0x30uy; 0xebuy; 0xe1uy; 0x8duy; 0x34uy; 0x18uy;
		0x40uy; 0x17uy; 0xa9uy; 0xa1uy; 0x1buy; 0xf5uy; 0x11uy; 0xc8uy;
		0xdfuy; 0xf8uy; 0xf8uy; 0x34uy; 0x73uy; 0x0buy; 0x96uy; 0xc1uy;
		0xb7uy; 0xc8uy; 0xdbuy; 0xcauy; 0x2fuy; 0xc3uy; 0xb6uy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_c_i: l:list uint8 {List.Tot.length l == 1}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x37uy;
		
	] in
  assert_norm(List.Tot.length l == 1);
  normalize_term l


inline_for_extraction noextract
let tv1_y_raw: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0xe2uy;
		0xf4uy; 0x12uy; 0x67uy; 0x77uy; 0x20uy; 0x5euy; 0x85uy; 0x3buy;
		0x43uy; 0x7duy; 0x6euy; 0xacuy; 0xa1uy; 0xe1uy; 0xf7uy; 0x53uy;
		0xcduy; 0xccuy; 0x3euy; 0x2cuy; 0x69uy; 0xfauy; 0x88uy; 0x4buy;
		0x0auy; 0x1auy; 0x64uy; 0x09uy; 0x77uy; 0xe4uy; 0x18uy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_g_y_raw: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x41uy;
		0x97uy; 0x01uy; 0xd7uy; 0xf0uy; 0x0auy; 0x26uy; 0xc2uy; 0xdcuy;
		0x58uy; 0x7auy; 0x36uy; 0xdduy; 0x75uy; 0x25uy; 0x49uy; 0xf3uy;
		0x37uy; 0x63uy; 0xc8uy; 0x93uy; 0x42uy; 0x2cuy; 0x8euy; 0xa0uy;
		0xf9uy; 0x55uy; 0xa1uy; 0x3auy; 0x4fuy; 0xf5uy; 0xd5uy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_g_xy_raw: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x2fuy;
		0x0cuy; 0xb7uy; 0xe8uy; 0x60uy; 0xbauy; 0x53uy; 0x8fuy; 0xbfuy;
		0x5cuy; 0x8buy; 0xdeuy; 0xd0uy; 0x09uy; 0xf6uy; 0x25uy; 0x9buy;
		0x4buy; 0x62uy; 0x8fuy; 0xe1uy; 0xebuy; 0x7duy; 0xbeuy; 0x93uy;
		0x78uy; 0xe5uy; 0xecuy; 0xf7uy; 0xa8uy; 0x24uy; 0xbauy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_salt_raw: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x00uy;
		0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
		0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
		0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
		0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_prk_2e_raw: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0xbauy;
		0xafuy; 0xccuy; 0x36uy; 0x99uy; 0x2fuy; 0x3auy; 0x12uy; 0x07uy;
		0x79uy; 0xa2uy; 0xb6uy; 0xeauy; 0x68uy; 0xd5uy; 0xc6uy; 0xfduy;
		0xeauy; 0x1euy; 0x6euy; 0x30uy; 0xc0uy; 0xaauy; 0xbeuy; 0x7fuy;
		0x90uy; 0xd9uy; 0xb5uy; 0x78uy; 0xffuy; 0x19uy; 0x7buy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_salt_3e2m: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x80uy;
		0x1auy; 0x13uy; 0xd6uy; 0x37uy; 0x13uy; 0x32uy; 0xe9uy; 0xbbuy;
		0x17uy; 0x58uy; 0x93uy; 0x88uy; 0x98uy; 0xcfuy; 0x11uy; 0xb7uy;
		0xabuy; 0x69uy; 0x4buy; 0x40uy; 0xacuy; 0x53uy; 0xffuy; 0x4cuy;
		0x41uy; 0xb2uy; 0xfauy; 0xcfuy; 0xe6uy; 0xf5uy; 0x01uy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_sk_r_raw: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x72uy;
		0xccuy; 0x47uy; 0x61uy; 0xdbuy; 0xd4uy; 0xc7uy; 0x8fuy; 0x75uy;
		0x89uy; 0x31uy; 0xaauy; 0x58uy; 0x9duy; 0x34uy; 0x8duy; 0x1euy;
		0xf8uy; 0x74uy; 0xa7uy; 0xe3uy; 0x03uy; 0xeduy; 0xe2uy; 0xf1uy;
		0x40uy; 0xdcuy; 0xf3uy; 0xe6uy; 0xaauy; 0x4auy; 0xacuy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_pk_r_raw: l:list uint8 {List.Tot.length l == 65}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x04uy;
		0xbbuy; 0xc3uy; 0x49uy; 0x60uy; 0x52uy; 0x6euy; 0xa4uy; 0xd3uy;
		0x2euy; 0x94uy; 0x0cuy; 0xaduy; 0x2auy; 0x23uy; 0x41uy; 0x48uy;
		0xdduy; 0xc2uy; 0x17uy; 0x91uy; 0xa1uy; 0x2auy; 0xfbuy; 0xcbuy;
		0xacuy; 0x93uy; 0x62uy; 0x20uy; 0x46uy; 0xdduy; 0x44uy; 0xf0uy;
		0x45uy; 0x19uy; 0xe2uy; 0x57uy; 0x23uy; 0x6buy; 0x2auy; 0x0cuy;
		0xe2uy; 0x02uy; 0x3fuy; 0x09uy; 0x31uy; 0xf1uy; 0xf3uy; 0x86uy;
		0xcauy; 0x7auy; 0xfduy; 0xa6uy; 0x4fuy; 0xcduy; 0xe0uy; 0x10uy;
		0x8cuy; 0x22uy; 0x4cuy; 0x51uy; 0xeauy; 0xbfuy; 0x60uy; 0x72uy;
		
	] in
  assert_norm(List.Tot.length l == 65);
  normalize_term l


inline_for_extraction noextract
let tv1_prk_3e2m_raw: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0xbauy;
		0xafuy; 0xccuy; 0x36uy; 0x99uy; 0x2fuy; 0x3auy; 0x12uy; 0x07uy;
		0x79uy; 0xa2uy; 0xb6uy; 0xeauy; 0x68uy; 0xd5uy; 0xc6uy; 0xfduy;
		0xeauy; 0x1euy; 0x6euy; 0x30uy; 0xc0uy; 0xaauy; 0xbeuy; 0x7fuy;
		0x90uy; 0xd9uy; 0xb5uy; 0x78uy; 0xffuy; 0x19uy; 0x7buy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_c_r: l:list uint8 {List.Tot.length l == 1}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x27uy;
		
	] in
  assert_norm(List.Tot.length l == 1);
  normalize_term l


inline_for_extraction noextract
let tv1_h_message_1_raw: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0xc7uy;
		0x93uy; 0x1fuy; 0xcauy; 0x62uy; 0x16uy; 0xcauy; 0xbcuy; 0xb5uy;
		0xa9uy; 0xabuy; 0x7buy; 0x17uy; 0x61uy; 0xaeuy; 0x46uy; 0x78uy;
		0x94uy; 0x6buy; 0xa4uy; 0xf6uy; 0x0buy; 0x6duy; 0xe1uy; 0x63uy;
		0x14uy; 0x69uy; 0x18uy; 0x2auy; 0x4euy; 0x67uy; 0x26uy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_input_th_2: l:list uint8 {List.Tot.length l == 69}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x58uy;
		0x20uy; 0x41uy; 0x97uy; 0x01uy; 0xd7uy; 0xf0uy; 0x0auy; 0x26uy;
		0xc2uy; 0xdcuy; 0x58uy; 0x7auy; 0x36uy; 0xdduy; 0x75uy; 0x25uy;
		0x49uy; 0xf3uy; 0x37uy; 0x63uy; 0xc8uy; 0x93uy; 0x42uy; 0x2cuy;
		0x8euy; 0xa0uy; 0xf9uy; 0x55uy; 0xa1uy; 0x3auy; 0x4fuy; 0xf5uy;
		0xd5uy; 0x27uy; 0x58uy; 0x20uy; 0xc7uy; 0x93uy; 0x1fuy; 0xcauy;
		0x62uy; 0x16uy; 0xcauy; 0xbcuy; 0xb5uy; 0xa9uy; 0xabuy; 0x7buy;
		0x17uy; 0x61uy; 0xaeuy; 0x46uy; 0x78uy; 0x94uy; 0x6buy; 0xa4uy;
		0xf6uy; 0x0buy; 0x6duy; 0xe1uy; 0x63uy; 0x14uy; 0x69uy; 0x18uy;
		0x2auy; 0x4euy; 0x67uy; 0x26uy; 
	] in
  assert_norm(List.Tot.length l == 69);
  normalize_term l


inline_for_extraction noextract
let tv1_th_2_raw: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0xe9uy;
		0x2buy; 0x4buy; 0x36uy; 0x43uy; 0x1euy; 0xffuy; 0x85uy; 0xbauy;
		0xeduy; 0x58uy; 0x8fuy; 0x1buy; 0x72uy; 0x6euy; 0x46uy; 0xbcuy;
		0xb4uy; 0x4duy; 0x60uy; 0xa9uy; 0xd6uy; 0x87uy; 0xc1uy; 0x3auy;
		0xb2uy; 0xd9uy; 0x2fuy; 0x92uy; 0xfbuy; 0xabuy; 0xa6uy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_id_cred_r: l:list uint8 {List.Tot.length l == 296}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0xa1uy;
		0x18uy; 0x21uy; 0x59uy; 0x01uy; 0x22uy; 0x30uy; 0x82uy; 0x01uy;
		0x1euy; 0x30uy; 0x81uy; 0xc5uy; 0xa0uy; 0x03uy; 0x02uy; 0x01uy;
		0x02uy; 0x02uy; 0x04uy; 0x61uy; 0xe9uy; 0x98uy; 0x1euy; 0x30uy;
		0x0auy; 0x06uy; 0x08uy; 0x2auy; 0x86uy; 0x48uy; 0xceuy; 0x3duy;
		0x04uy; 0x03uy; 0x02uy; 0x30uy; 0x15uy; 0x31uy; 0x13uy; 0x30uy;
		0x11uy; 0x06uy; 0x03uy; 0x55uy; 0x04uy; 0x03uy; 0x0cuy; 0x0auy;
		0x45uy; 0x44uy; 0x48uy; 0x4fuy; 0x43uy; 0x20uy; 0x52uy; 0x6fuy;
		0x6fuy; 0x74uy; 0x30uy; 0x1euy; 0x17uy; 0x0duy; 0x32uy; 0x32uy;
		0x30uy; 0x31uy; 0x32uy; 0x30uy; 0x31uy; 0x37uy; 0x31uy; 0x33uy;
		0x30uy; 0x32uy; 0x5auy; 0x17uy; 0x0duy; 0x32uy; 0x39uy; 0x31uy;
		0x32uy; 0x33uy; 0x31uy; 0x32uy; 0x33uy; 0x30uy; 0x30uy; 0x30uy;
		0x30uy; 0x5auy; 0x30uy; 0x1auy; 0x31uy; 0x18uy; 0x30uy; 0x16uy;
		0x06uy; 0x03uy; 0x55uy; 0x04uy; 0x03uy; 0x0cuy; 0x0fuy; 0x45uy;
		0x44uy; 0x48uy; 0x4fuy; 0x43uy; 0x20uy; 0x52uy; 0x65uy; 0x73uy;
		0x70uy; 0x6fuy; 0x6euy; 0x64uy; 0x65uy; 0x72uy; 0x30uy; 0x59uy;
		0x30uy; 0x13uy; 0x06uy; 0x07uy; 0x2auy; 0x86uy; 0x48uy; 0xceuy;
		0x3duy; 0x02uy; 0x01uy; 0x06uy; 0x08uy; 0x2auy; 0x86uy; 0x48uy;
		0xceuy; 0x3duy; 0x03uy; 0x01uy; 0x07uy; 0x03uy; 0x42uy; 0x00uy;
		0x04uy; 0xbbuy; 0xc3uy; 0x49uy; 0x60uy; 0x52uy; 0x6euy; 0xa4uy;
		0xd3uy; 0x2euy; 0x94uy; 0x0cuy; 0xaduy; 0x2auy; 0x23uy; 0x41uy;
		0x48uy; 0xdduy; 0xc2uy; 0x17uy; 0x91uy; 0xa1uy; 0x2auy; 0xfbuy;
		0xcbuy; 0xacuy; 0x93uy; 0x62uy; 0x20uy; 0x46uy; 0xdduy; 0x44uy;
		0xf0uy; 0x45uy; 0x19uy; 0xe2uy; 0x57uy; 0x23uy; 0x6buy; 0x2auy;
		0x0cuy; 0xe2uy; 0x02uy; 0x3fuy; 0x09uy; 0x31uy; 0xf1uy; 0xf3uy;
		0x86uy; 0xcauy; 0x7auy; 0xfduy; 0xa6uy; 0x4fuy; 0xcduy; 0xe0uy;
		0x10uy; 0x8cuy; 0x22uy; 0x4cuy; 0x51uy; 0xeauy; 0xbfuy; 0x60uy;
		0x72uy; 0x30uy; 0x0auy; 0x06uy; 0x08uy; 0x2auy; 0x86uy; 0x48uy;
		0xceuy; 0x3duy; 0x04uy; 0x03uy; 0x02uy; 0x03uy; 0x48uy; 0x00uy;
		0x30uy; 0x45uy; 0x02uy; 0x20uy; 0x30uy; 0x19uy; 0x4euy; 0xf5uy;
		0xfcuy; 0x65uy; 0xc8uy; 0xb7uy; 0x95uy; 0xcduy; 0xcduy; 0x0buy;
		0xb4uy; 0x31uy; 0xbfuy; 0x83uy; 0xeeuy; 0x67uy; 0x41uy; 0xc1uy;
		0x37uy; 0x0cuy; 0x22uy; 0xc8uy; 0xebuy; 0x8euy; 0xe9uy; 0xeduy;
		0xd2uy; 0xa7uy; 0x05uy; 0x19uy; 0x02uy; 0x21uy; 0x00uy; 0xb5uy;
		0x83uy; 0x0euy; 0x9cuy; 0x89uy; 0xa6uy; 0x2auy; 0xc7uy; 0x3cuy;
		0xe1uy; 0xebuy; 0xceuy; 0x00uy; 0x61uy; 0x70uy; 0x7duy; 0xb8uy;
		0xa8uy; 0x8euy; 0x23uy; 0x70uy; 0x9buy; 0x4auy; 0xccuy; 0x58uy;
		0xa1uy; 0x31uy; 0x3buy; 0x13uy; 0x3duy; 0x05uy; 0x58uy; 
	] in
  assert_norm(List.Tot.length l == 296);
  normalize_term l


inline_for_extraction noextract
let tv1_info_mac_2: l:list uint8 {List.Tot.length l == 629}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x02uy;
		0x59uy; 0x02uy; 0x6fuy; 0xa1uy; 0x18uy; 0x21uy; 0x59uy; 0x01uy;
		0x22uy; 0x30uy; 0x82uy; 0x01uy; 0x1euy; 0x30uy; 0x81uy; 0xc5uy;
		0xa0uy; 0x03uy; 0x02uy; 0x01uy; 0x02uy; 0x02uy; 0x04uy; 0x61uy;
		0xe9uy; 0x98uy; 0x1euy; 0x30uy; 0x0auy; 0x06uy; 0x08uy; 0x2auy;
		0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x04uy; 0x03uy; 0x02uy; 0x30uy;
		0x15uy; 0x31uy; 0x13uy; 0x30uy; 0x11uy; 0x06uy; 0x03uy; 0x55uy;
		0x04uy; 0x03uy; 0x0cuy; 0x0auy; 0x45uy; 0x44uy; 0x48uy; 0x4fuy;
		0x43uy; 0x20uy; 0x52uy; 0x6fuy; 0x6fuy; 0x74uy; 0x30uy; 0x1euy;
		0x17uy; 0x0duy; 0x32uy; 0x32uy; 0x30uy; 0x31uy; 0x32uy; 0x30uy;
		0x31uy; 0x37uy; 0x31uy; 0x33uy; 0x30uy; 0x32uy; 0x5auy; 0x17uy;
		0x0duy; 0x32uy; 0x39uy; 0x31uy; 0x32uy; 0x33uy; 0x31uy; 0x32uy;
		0x33uy; 0x30uy; 0x30uy; 0x30uy; 0x30uy; 0x5auy; 0x30uy; 0x1auy;
		0x31uy; 0x18uy; 0x30uy; 0x16uy; 0x06uy; 0x03uy; 0x55uy; 0x04uy;
		0x03uy; 0x0cuy; 0x0fuy; 0x45uy; 0x44uy; 0x48uy; 0x4fuy; 0x43uy;
		0x20uy; 0x52uy; 0x65uy; 0x73uy; 0x70uy; 0x6fuy; 0x6euy; 0x64uy;
		0x65uy; 0x72uy; 0x30uy; 0x59uy; 0x30uy; 0x13uy; 0x06uy; 0x07uy;
		0x2auy; 0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x02uy; 0x01uy; 0x06uy;
		0x08uy; 0x2auy; 0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x03uy; 0x01uy;
		0x07uy; 0x03uy; 0x42uy; 0x00uy; 0x04uy; 0xbbuy; 0xc3uy; 0x49uy;
		0x60uy; 0x52uy; 0x6euy; 0xa4uy; 0xd3uy; 0x2euy; 0x94uy; 0x0cuy;
		0xaduy; 0x2auy; 0x23uy; 0x41uy; 0x48uy; 0xdduy; 0xc2uy; 0x17uy;
		0x91uy; 0xa1uy; 0x2auy; 0xfbuy; 0xcbuy; 0xacuy; 0x93uy; 0x62uy;
		0x20uy; 0x46uy; 0xdduy; 0x44uy; 0xf0uy; 0x45uy; 0x19uy; 0xe2uy;
		0x57uy; 0x23uy; 0x6buy; 0x2auy; 0x0cuy; 0xe2uy; 0x02uy; 0x3fuy;
		0x09uy; 0x31uy; 0xf1uy; 0xf3uy; 0x86uy; 0xcauy; 0x7auy; 0xfduy;
		0xa6uy; 0x4fuy; 0xcduy; 0xe0uy; 0x10uy; 0x8cuy; 0x22uy; 0x4cuy;
		0x51uy; 0xeauy; 0xbfuy; 0x60uy; 0x72uy; 0x30uy; 0x0auy; 0x06uy;
		0x08uy; 0x2auy; 0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x04uy; 0x03uy;
		0x02uy; 0x03uy; 0x48uy; 0x00uy; 0x30uy; 0x45uy; 0x02uy; 0x20uy;
		0x30uy; 0x19uy; 0x4euy; 0xf5uy; 0xfcuy; 0x65uy; 0xc8uy; 0xb7uy;
		0x95uy; 0xcduy; 0xcduy; 0x0buy; 0xb4uy; 0x31uy; 0xbfuy; 0x83uy;
		0xeeuy; 0x67uy; 0x41uy; 0xc1uy; 0x37uy; 0x0cuy; 0x22uy; 0xc8uy;
		0xebuy; 0x8euy; 0xe9uy; 0xeduy; 0xd2uy; 0xa7uy; 0x05uy; 0x19uy;
		0x02uy; 0x21uy; 0x00uy; 0xb5uy; 0x83uy; 0x0euy; 0x9cuy; 0x89uy;
		0xa6uy; 0x2auy; 0xc7uy; 0x3cuy; 0xe1uy; 0xebuy; 0xceuy; 0x00uy;
		0x61uy; 0x70uy; 0x7duy; 0xb8uy; 0xa8uy; 0x8euy; 0x23uy; 0x70uy;
		0x9buy; 0x4auy; 0xccuy; 0x58uy; 0xa1uy; 0x31uy; 0x3buy; 0x13uy;
		0x3duy; 0x05uy; 0x58uy; 0x58uy; 0x20uy; 0xe9uy; 0x2buy; 0x4buy;
		0x36uy; 0x43uy; 0x1euy; 0xffuy; 0x85uy; 0xbauy; 0xeduy; 0x58uy;
		0x8fuy; 0x1buy; 0x72uy; 0x6euy; 0x46uy; 0xbcuy; 0xb4uy; 0x4duy;
		0x60uy; 0xa9uy; 0xd6uy; 0x87uy; 0xc1uy; 0x3auy; 0xb2uy; 0xd9uy;
		0x2fuy; 0x92uy; 0xfbuy; 0xabuy; 0xa6uy; 0x59uy; 0x01uy; 0x22uy;
		0x30uy; 0x82uy; 0x01uy; 0x1euy; 0x30uy; 0x81uy; 0xc5uy; 0xa0uy;
		0x03uy; 0x02uy; 0x01uy; 0x02uy; 0x02uy; 0x04uy; 0x61uy; 0xe9uy;
		0x98uy; 0x1euy; 0x30uy; 0x0auy; 0x06uy; 0x08uy; 0x2auy; 0x86uy;
		0x48uy; 0xceuy; 0x3duy; 0x04uy; 0x03uy; 0x02uy; 0x30uy; 0x15uy;
		0x31uy; 0x13uy; 0x30uy; 0x11uy; 0x06uy; 0x03uy; 0x55uy; 0x04uy;
		0x03uy; 0x0cuy; 0x0auy; 0x45uy; 0x44uy; 0x48uy; 0x4fuy; 0x43uy;
		0x20uy; 0x52uy; 0x6fuy; 0x6fuy; 0x74uy; 0x30uy; 0x1euy; 0x17uy;
		0x0duy; 0x32uy; 0x32uy; 0x30uy; 0x31uy; 0x32uy; 0x30uy; 0x31uy;
		0x37uy; 0x31uy; 0x33uy; 0x30uy; 0x32uy; 0x5auy; 0x17uy; 0x0duy;
		0x32uy; 0x39uy; 0x31uy; 0x32uy; 0x33uy; 0x31uy; 0x32uy; 0x33uy;
		0x30uy; 0x30uy; 0x30uy; 0x30uy; 0x5auy; 0x30uy; 0x1auy; 0x31uy;
		0x18uy; 0x30uy; 0x16uy; 0x06uy; 0x03uy; 0x55uy; 0x04uy; 0x03uy;
		0x0cuy; 0x0fuy; 0x45uy; 0x44uy; 0x48uy; 0x4fuy; 0x43uy; 0x20uy;
		0x52uy; 0x65uy; 0x73uy; 0x70uy; 0x6fuy; 0x6euy; 0x64uy; 0x65uy;
		0x72uy; 0x30uy; 0x59uy; 0x30uy; 0x13uy; 0x06uy; 0x07uy; 0x2auy;
		0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x02uy; 0x01uy; 0x06uy; 0x08uy;
		0x2auy; 0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x03uy; 0x01uy; 0x07uy;
		0x03uy; 0x42uy; 0x00uy; 0x04uy; 0xbbuy; 0xc3uy; 0x49uy; 0x60uy;
		0x52uy; 0x6euy; 0xa4uy; 0xd3uy; 0x2euy; 0x94uy; 0x0cuy; 0xaduy;
		0x2auy; 0x23uy; 0x41uy; 0x48uy; 0xdduy; 0xc2uy; 0x17uy; 0x91uy;
		0xa1uy; 0x2auy; 0xfbuy; 0xcbuy; 0xacuy; 0x93uy; 0x62uy; 0x20uy;
		0x46uy; 0xdduy; 0x44uy; 0xf0uy; 0x45uy; 0x19uy; 0xe2uy; 0x57uy;
		0x23uy; 0x6buy; 0x2auy; 0x0cuy; 0xe2uy; 0x02uy; 0x3fuy; 0x09uy;
		0x31uy; 0xf1uy; 0xf3uy; 0x86uy; 0xcauy; 0x7auy; 0xfduy; 0xa6uy;
		0x4fuy; 0xcduy; 0xe0uy; 0x10uy; 0x8cuy; 0x22uy; 0x4cuy; 0x51uy;
		0xeauy; 0xbfuy; 0x60uy; 0x72uy; 0x30uy; 0x0auy; 0x06uy; 0x08uy;
		0x2auy; 0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x04uy; 0x03uy; 0x02uy;
		0x03uy; 0x48uy; 0x00uy; 0x30uy; 0x45uy; 0x02uy; 0x20uy; 0x30uy;
		0x19uy; 0x4euy; 0xf5uy; 0xfcuy; 0x65uy; 0xc8uy; 0xb7uy; 0x95uy;
		0xcduy; 0xcduy; 0x0buy; 0xb4uy; 0x31uy; 0xbfuy; 0x83uy; 0xeeuy;
		0x67uy; 0x41uy; 0xc1uy; 0x37uy; 0x0cuy; 0x22uy; 0xc8uy; 0xebuy;
		0x8euy; 0xe9uy; 0xeduy; 0xd2uy; 0xa7uy; 0x05uy; 0x19uy; 0x02uy;
		0x21uy; 0x00uy; 0xb5uy; 0x83uy; 0x0euy; 0x9cuy; 0x89uy; 0xa6uy;
		0x2auy; 0xc7uy; 0x3cuy; 0xe1uy; 0xebuy; 0xceuy; 0x00uy; 0x61uy;
		0x70uy; 0x7duy; 0xb8uy; 0xa8uy; 0x8euy; 0x23uy; 0x70uy; 0x9buy;
		0x4auy; 0xccuy; 0x58uy; 0xa1uy; 0x31uy; 0x3buy; 0x13uy; 0x3duy;
		0x05uy; 0x58uy; 0x18uy; 0x20uy; 
	] in
  assert_norm(List.Tot.length l == 629);
  normalize_term l


inline_for_extraction noextract
let tv1_mac_2_raw: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0xd5uy;
		0x38uy; 0xb0uy; 0x78uy; 0xcbuy; 0x4fuy; 0x31uy; 0x51uy; 0xffuy;
		0x55uy; 0x47uy; 0xd7uy; 0xa8uy; 0xc1uy; 0x23uy; 0x92uy; 0xacuy;
		0x48uy; 0x63uy; 0x23uy; 0x4duy; 0xbauy; 0x3auy; 0x9fuy; 0x39uy;
		0xe0uy; 0x00uy; 0xb2uy; 0xecuy; 0x94uy; 0xb8uy; 0x3duy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_sig_or_mac_2_raw: l:list uint8 {List.Tot.length l == 64}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0xa3uy;
		0x0auy; 0x50uy; 0x5duy; 0x87uy; 0x36uy; 0x91uy; 0xf4uy; 0xe5uy;
		0x79uy; 0x21uy; 0x33uy; 0xf6uy; 0xfduy; 0x42uy; 0x0fuy; 0x1euy;
		0x77uy; 0x25uy; 0x56uy; 0x2buy; 0xe4uy; 0xeeuy; 0x47uy; 0x10uy;
		0xa9uy; 0x5duy; 0x43uy; 0xaduy; 0x17uy; 0x17uy; 0xafuy; 0xdeuy;
		0x10uy; 0xe1uy; 0x48uy; 0xbeuy; 0x76uy; 0x4euy; 0xfcuy; 0x51uy;
		0xafuy; 0x3buy; 0x74uy; 0x80uy; 0xbcuy; 0xf8uy; 0xf2uy; 0x93uy;
		0x8euy; 0xc7uy; 0x55uy; 0x00uy; 0xeduy; 0xb7uy; 0xaauy; 0x5buy;
		0x9euy; 0xcbuy; 0x3cuy; 0xaduy; 0xbfuy; 0x96uy; 0xfduy; 
	] in
  assert_norm(List.Tot.length l == 64);
  normalize_term l


inline_for_extraction noextract
let tv1_plaintext_2: l:list uint8 {List.Tot.length l == 362}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0xa1uy;
		0x18uy; 0x21uy; 0x59uy; 0x01uy; 0x22uy; 0x30uy; 0x82uy; 0x01uy;
		0x1euy; 0x30uy; 0x81uy; 0xc5uy; 0xa0uy; 0x03uy; 0x02uy; 0x01uy;
		0x02uy; 0x02uy; 0x04uy; 0x61uy; 0xe9uy; 0x98uy; 0x1euy; 0x30uy;
		0x0auy; 0x06uy; 0x08uy; 0x2auy; 0x86uy; 0x48uy; 0xceuy; 0x3duy;
		0x04uy; 0x03uy; 0x02uy; 0x30uy; 0x15uy; 0x31uy; 0x13uy; 0x30uy;
		0x11uy; 0x06uy; 0x03uy; 0x55uy; 0x04uy; 0x03uy; 0x0cuy; 0x0auy;
		0x45uy; 0x44uy; 0x48uy; 0x4fuy; 0x43uy; 0x20uy; 0x52uy; 0x6fuy;
		0x6fuy; 0x74uy; 0x30uy; 0x1euy; 0x17uy; 0x0duy; 0x32uy; 0x32uy;
		0x30uy; 0x31uy; 0x32uy; 0x30uy; 0x31uy; 0x37uy; 0x31uy; 0x33uy;
		0x30uy; 0x32uy; 0x5auy; 0x17uy; 0x0duy; 0x32uy; 0x39uy; 0x31uy;
		0x32uy; 0x33uy; 0x31uy; 0x32uy; 0x33uy; 0x30uy; 0x30uy; 0x30uy;
		0x30uy; 0x5auy; 0x30uy; 0x1auy; 0x31uy; 0x18uy; 0x30uy; 0x16uy;
		0x06uy; 0x03uy; 0x55uy; 0x04uy; 0x03uy; 0x0cuy; 0x0fuy; 0x45uy;
		0x44uy; 0x48uy; 0x4fuy; 0x43uy; 0x20uy; 0x52uy; 0x65uy; 0x73uy;
		0x70uy; 0x6fuy; 0x6euy; 0x64uy; 0x65uy; 0x72uy; 0x30uy; 0x59uy;
		0x30uy; 0x13uy; 0x06uy; 0x07uy; 0x2auy; 0x86uy; 0x48uy; 0xceuy;
		0x3duy; 0x02uy; 0x01uy; 0x06uy; 0x08uy; 0x2auy; 0x86uy; 0x48uy;
		0xceuy; 0x3duy; 0x03uy; 0x01uy; 0x07uy; 0x03uy; 0x42uy; 0x00uy;
		0x04uy; 0xbbuy; 0xc3uy; 0x49uy; 0x60uy; 0x52uy; 0x6euy; 0xa4uy;
		0xd3uy; 0x2euy; 0x94uy; 0x0cuy; 0xaduy; 0x2auy; 0x23uy; 0x41uy;
		0x48uy; 0xdduy; 0xc2uy; 0x17uy; 0x91uy; 0xa1uy; 0x2auy; 0xfbuy;
		0xcbuy; 0xacuy; 0x93uy; 0x62uy; 0x20uy; 0x46uy; 0xdduy; 0x44uy;
		0xf0uy; 0x45uy; 0x19uy; 0xe2uy; 0x57uy; 0x23uy; 0x6buy; 0x2auy;
		0x0cuy; 0xe2uy; 0x02uy; 0x3fuy; 0x09uy; 0x31uy; 0xf1uy; 0xf3uy;
		0x86uy; 0xcauy; 0x7auy; 0xfduy; 0xa6uy; 0x4fuy; 0xcduy; 0xe0uy;
		0x10uy; 0x8cuy; 0x22uy; 0x4cuy; 0x51uy; 0xeauy; 0xbfuy; 0x60uy;
		0x72uy; 0x30uy; 0x0auy; 0x06uy; 0x08uy; 0x2auy; 0x86uy; 0x48uy;
		0xceuy; 0x3duy; 0x04uy; 0x03uy; 0x02uy; 0x03uy; 0x48uy; 0x00uy;
		0x30uy; 0x45uy; 0x02uy; 0x20uy; 0x30uy; 0x19uy; 0x4euy; 0xf5uy;
		0xfcuy; 0x65uy; 0xc8uy; 0xb7uy; 0x95uy; 0xcduy; 0xcduy; 0x0buy;
		0xb4uy; 0x31uy; 0xbfuy; 0x83uy; 0xeeuy; 0x67uy; 0x41uy; 0xc1uy;
		0x37uy; 0x0cuy; 0x22uy; 0xc8uy; 0xebuy; 0x8euy; 0xe9uy; 0xeduy;
		0xd2uy; 0xa7uy; 0x05uy; 0x19uy; 0x02uy; 0x21uy; 0x00uy; 0xb5uy;
		0x83uy; 0x0euy; 0x9cuy; 0x89uy; 0xa6uy; 0x2auy; 0xc7uy; 0x3cuy;
		0xe1uy; 0xebuy; 0xceuy; 0x00uy; 0x61uy; 0x70uy; 0x7duy; 0xb8uy;
		0xa8uy; 0x8euy; 0x23uy; 0x70uy; 0x9buy; 0x4auy; 0xccuy; 0x58uy;
		0xa1uy; 0x31uy; 0x3buy; 0x13uy; 0x3duy; 0x05uy; 0x58uy; 0x58uy;
		0x40uy; 0xa3uy; 0x0auy; 0x50uy; 0x5duy; 0x87uy; 0x36uy; 0x91uy;
		0xf4uy; 0xe5uy; 0x79uy; 0x21uy; 0x33uy; 0xf6uy; 0xfduy; 0x42uy;
		0x0fuy; 0x1euy; 0x77uy; 0x25uy; 0x56uy; 0x2buy; 0xe4uy; 0xeeuy;
		0x47uy; 0x10uy; 0xa9uy; 0x5duy; 0x43uy; 0xaduy; 0x17uy; 0x17uy;
		0xafuy; 0xdeuy; 0x10uy; 0xe1uy; 0x48uy; 0xbeuy; 0x76uy; 0x4euy;
		0xfcuy; 0x51uy; 0xafuy; 0x3buy; 0x74uy; 0x80uy; 0xbcuy; 0xf8uy;
		0xf2uy; 0x93uy; 0x8euy; 0xc7uy; 0x55uy; 0x00uy; 0xeduy; 0xb7uy;
		0xaauy; 0x5buy; 0x9euy; 0xcbuy; 0x3cuy; 0xaduy; 0xbfuy; 0x96uy;
		0xfduy; 
	] in
  assert_norm(List.Tot.length l == 362);
  normalize_term l


inline_for_extraction noextract
let tv1_keystream_2_raw: l:list uint8 {List.Tot.length l == 362}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0xdcuy;
		0x1auy; 0x12uy; 0x50uy; 0x37uy; 0xd4uy; 0x3fuy; 0x39uy; 0xe9uy;
		0xb5uy; 0xb1uy; 0x06uy; 0x56uy; 0x18uy; 0x35uy; 0xfduy; 0xd1uy;
		0x5cuy; 0xd2uy; 0x86uy; 0x32uy; 0xf7uy; 0xbeuy; 0xb4uy; 0xf1uy;
		0x80uy; 0xc1uy; 0x9cuy; 0x66uy; 0x3euy; 0xceuy; 0xc5uy; 0x82uy;
		0xc2uy; 0xefuy; 0xceuy; 0x13uy; 0x12uy; 0x71uy; 0x3cuy; 0x9auy;
		0x83uy; 0x81uy; 0x1euy; 0x26uy; 0xeauy; 0x16uy; 0xa8uy; 0x3fuy;
		0x0buy; 0x58uy; 0x00uy; 0xe2uy; 0x94uy; 0xf8uy; 0xc5uy; 0x82uy;
		0xacuy; 0xc6uy; 0x13uy; 0x7auy; 0x16uy; 0x75uy; 0x7buy; 0xeduy;
		0xffuy; 0xd5uy; 0xb2uy; 0x3buy; 0x8auy; 0x21uy; 0x55uy; 0xc5uy;
		0xe5uy; 0xafuy; 0x14uy; 0x8duy; 0x76uy; 0x4cuy; 0x25uy; 0xdduy;
		0xa2uy; 0x97uy; 0x00uy; 0xdduy; 0xa5uy; 0x80uy; 0xc3uy; 0xf9uy;
		0x3auy; 0xe1uy; 0x03uy; 0x21uy; 0x9duy; 0xe6uy; 0x2fuy; 0xd7uy;
		0x9buy; 0x3euy; 0xb3uy; 0x72uy; 0xdfuy; 0xd7uy; 0x57uy; 0x78uy;
		0x49uy; 0xeduy; 0x13uy; 0x2duy; 0xd8uy; 0x09uy; 0x11uy; 0x9duy;
		0x52uy; 0xa9uy; 0x86uy; 0x12uy; 0x7fuy; 0x99uy; 0xfauy; 0x81uy;
		0xe3uy; 0x7duy; 0x0cuy; 0x55uy; 0xcauy; 0x41uy; 0xd7uy; 0xb3uy;
		0x25uy; 0xa2uy; 0xfbuy; 0x80uy; 0xf1uy; 0xaeuy; 0xc7uy; 0x4euy;
		0x0duy; 0x26uy; 0xf1uy; 0xb1uy; 0x5buy; 0x61uy; 0xe1uy; 0x22uy;
		0x66uy; 0xfbuy; 0x67uy; 0xf0uy; 0xe3uy; 0xc6uy; 0x11uy; 0xaduy;
		0xd6uy; 0xb3uy; 0x48uy; 0xfeuy; 0xe7uy; 0xc0uy; 0xe0uy; 0xdduy;
		0x29uy; 0x78uy; 0x33uy; 0x95uy; 0x65uy; 0x06uy; 0xbduy; 0xcbuy;
		0x94uy; 0x64uy; 0x99uy; 0xf1uy; 0x7buy; 0x3duy; 0x80uy; 0x13uy;
		0x73uy; 0xe8uy; 0x4auy; 0x33uy; 0xd7uy; 0xc3uy; 0xd1uy; 0x26uy;
		0xe2uy; 0x62uy; 0x4cuy; 0x99uy; 0x79uy; 0x4duy; 0xc2uy; 0x97uy;
		0x1cuy; 0x74uy; 0x1euy; 0xbfuy; 0x4fuy; 0xf5uy; 0x19uy; 0x4auy;
		0xe7uy; 0x33uy; 0x0cuy; 0xc7uy; 0xfauy; 0xbbuy; 0xb3uy; 0x40uy;
		0xd7uy; 0xe2uy; 0x8cuy; 0xbduy; 0x06uy; 0x53uy; 0x07uy; 0x79uy;
		0xebuy; 0x8euy; 0x82uy; 0x9fuy; 0x8fuy; 0x8duy; 0xb3uy; 0xdeuy;
		0x60uy; 0xb0uy; 0x2euy; 0x46uy; 0x15uy; 0x51uy; 0x23uy; 0x77uy;
		0x12uy; 0x52uy; 0xf7uy; 0xf1uy; 0x11uy; 0x32uy; 0x49uy; 0x37uy;
		0x45uy; 0xabuy; 0x48uy; 0xe6uy; 0x51uy; 0xe1uy; 0xeduy; 0x9euy;
		0x5euy; 0x71uy; 0xfduy; 0xeeuy; 0xb5uy; 0x01uy; 0x9cuy; 0x58uy;
		0x40uy; 0xd2uy; 0x5cuy; 0x7cuy; 0xa3uy; 0x03uy; 0x97uy; 0x59uy;
		0xb1uy; 0x7fuy; 0x31uy; 0x7auy; 0x49uy; 0x56uy; 0x89uy; 0x50uy;
		0x33uy; 0x70uy; 0x87uy; 0x5fuy; 0xabuy; 0x97uy; 0x3cuy; 0x38uy;
		0x1buy; 0x75uy; 0x73uy; 0x2duy; 0x92uy; 0x05uy; 0x92uy; 0x88uy;
		0x6auy; 0x75uy; 0x4fuy; 0x14uy; 0x74uy; 0x9duy; 0xf3uy; 0x57uy;
		0x0duy; 0xa3uy; 0x4fuy; 0x35uy; 0xd1uy; 0xd6uy; 0x15uy; 0xf5uy;
		0xdduy; 0x03uy; 0x25uy; 0x0euy; 0xc2uy; 0x44uy; 0xd6uy; 0x86uy;
		0x7euy; 0x3duy; 0x4duy; 0x81uy; 0x70uy; 0x59uy; 0x41uy; 0x03uy;
		0x07uy; 0x38uy; 0x75uy; 0x00uy; 0x37uy; 0x8buy; 0x19uy; 0x68uy;
		0xa1uy; 0xd6uy; 0xcauy; 0xbduy; 0xecuy; 0x01uy; 0xfauy; 0x4fuy;
		0x71uy; 0x4auy; 0xf9uy; 0x0duy; 0xf1uy; 0xdduy; 0x8euy; 0x54uy;
		0xf4uy; 0x65uy; 0x13uy; 0xfbuy; 0x6fuy; 0x59uy; 0x5buy; 0x26uy;
		0x78uy; 0x90uy; 0x4cuy; 0xb6uy; 0x21uy; 0xbauy; 0x97uy; 0x9duy;
		0xd1uy; 
	] in
  assert_norm(List.Tot.length l == 362);
  normalize_term l


inline_for_extraction noextract
let tv1_ciphertext_2_raw: l:list uint8 {List.Tot.length l == 362}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x7duy;
		0x02uy; 0x33uy; 0x09uy; 0x36uy; 0xf6uy; 0x0fuy; 0xbbuy; 0xe8uy;
		0xabuy; 0x81uy; 0x87uy; 0x93uy; 0xb8uy; 0x36uy; 0xffuy; 0xd0uy;
		0x5euy; 0xd0uy; 0x82uy; 0x53uy; 0x1euy; 0x26uy; 0xaauy; 0xc1uy;
		0x8auy; 0xc7uy; 0x94uy; 0x4cuy; 0xb8uy; 0x86uy; 0x0buy; 0xbfuy;
		0xc6uy; 0xecuy; 0xccuy; 0x23uy; 0x07uy; 0x40uy; 0x2fuy; 0xaauy;
		0x92uy; 0x87uy; 0x1duy; 0x73uy; 0xeeuy; 0x15uy; 0xa4uy; 0x35uy;
		0x4euy; 0x1cuy; 0x48uy; 0xaduy; 0xd7uy; 0xd8uy; 0x97uy; 0xeduy;
		0xc3uy; 0xb2uy; 0x23uy; 0x64uy; 0x01uy; 0x78uy; 0x49uy; 0xdfuy;
		0xcfuy; 0xe4uy; 0x80uy; 0x0buy; 0xbbuy; 0x16uy; 0x64uy; 0xf6uy;
		0xd5uy; 0x9duy; 0x4euy; 0x9auy; 0x7buy; 0x7euy; 0x1cuy; 0xecuy;
		0x90uy; 0xa4uy; 0x31uy; 0xefuy; 0x96uy; 0xb0uy; 0xf3uy; 0xc9uy;
		0x0auy; 0xbbuy; 0x33uy; 0x3buy; 0xacuy; 0xfeuy; 0x1fuy; 0xc1uy;
		0x9duy; 0x3duy; 0xe6uy; 0x76uy; 0xdcuy; 0xdbuy; 0x58uy; 0x3duy;
		0x0duy; 0xa5uy; 0x5cuy; 0x6euy; 0xf8uy; 0x5buy; 0x74uy; 0xeeuy;
		0x22uy; 0xc6uy; 0xe8uy; 0x76uy; 0x1auy; 0xebuy; 0xcauy; 0xd8uy;
		0xd3uy; 0x6euy; 0x0auy; 0x52uy; 0xe0uy; 0xc7uy; 0x9fuy; 0x7duy;
		0x18uy; 0xa0uy; 0xfauy; 0x86uy; 0xf9uy; 0x84uy; 0x41uy; 0x06uy;
		0xc3uy; 0x1buy; 0xf2uy; 0xb0uy; 0x5cuy; 0x62uy; 0xa3uy; 0x22uy;
		0x62uy; 0x40uy; 0xa4uy; 0xb9uy; 0x83uy; 0x94uy; 0x7fuy; 0x09uy;
		0x05uy; 0x9duy; 0xdcuy; 0xf2uy; 0x4auy; 0xeauy; 0xc3uy; 0x9cuy;
		0x61uy; 0xa5uy; 0xf1uy; 0x82uy; 0xf4uy; 0xa7uy; 0x97uy; 0x30uy;
		0x5fuy; 0xc8uy; 0x0auy; 0x93uy; 0x5buy; 0x7buy; 0x5duy; 0x57uy;
		0x83uy; 0xaduy; 0x53uy; 0xd1uy; 0x80uy; 0xe0uy; 0xbauy; 0x0cuy;
		0xeeuy; 0x80uy; 0x4euy; 0xa6uy; 0x70uy; 0x7cuy; 0x33uy; 0x64uy;
		0x9auy; 0xbeuy; 0x64uy; 0x42uy; 0xe9uy; 0xbauy; 0xd4uy; 0xaauy;
		0xf7uy; 0xbfuy; 0x2euy; 0x8buy; 0xabuy; 0x51uy; 0x0cuy; 0x20uy;
		0xa5uy; 0xd2uy; 0x86uy; 0xbbuy; 0x0euy; 0x79uy; 0x81uy; 0x31uy;
		0x25uy; 0xb3uy; 0x86uy; 0x9cuy; 0x8duy; 0x8euy; 0xfbuy; 0xdeuy;
		0x50uy; 0xf5uy; 0x2cuy; 0x66uy; 0x25uy; 0x48uy; 0x6duy; 0x82uy;
		0xeeuy; 0x37uy; 0x3fuy; 0x46uy; 0x84uy; 0xffuy; 0x84uy; 0x3cuy;
		0xf1uy; 0x9auy; 0xf7uy; 0x65uy; 0xbfuy; 0x86uy; 0xacuy; 0x5fuy;
		0x69uy; 0x7duy; 0xdfuy; 0x26uy; 0x5euy; 0x8fuy; 0x75uy; 0xb5uy;
		0x92uy; 0x75uy; 0x59uy; 0x65uy; 0xa1uy; 0x22uy; 0x97uy; 0xecuy;
		0x32uy; 0x71uy; 0xaduy; 0xf3uy; 0xefuy; 0x7cuy; 0x4euy; 0x6cuy;
		0xd2uy; 0x9buy; 0x49uy; 0x5fuy; 0xcauy; 0xe7uy; 0x41uy; 0x80uy;
		0xb3uy; 0xfbuy; 0x50uy; 0x5duy; 0x09uy; 0x4fuy; 0x5euy; 0xd0uy;
		0xcbuy; 0x44uy; 0x74uy; 0x07uy; 0x49uy; 0x98uy; 0xabuy; 0x0fuy;
		0x4duy; 0x00uy; 0x45uy; 0x65uy; 0x8cuy; 0x51uy; 0x23uy; 0x64uy;
		0x29uy; 0xe6uy; 0x5cuy; 0x2fuy; 0xf1uy; 0xb2uy; 0x2buy; 0xc4uy;
		0x71uy; 0x23uy; 0x3auy; 0xa4uy; 0x26uy; 0x72uy; 0xa5uy; 0xeduy;
		0x40uy; 0x28uy; 0xdcuy; 0x5duy; 0x74uy; 0x26uy; 0x0euy; 0x7fuy;
		0x0euy; 0x08uy; 0xdauy; 0x5cuy; 0xa4uy; 0xbfuy; 0x8cuy; 0x01uy;
		0x8duy; 0x1buy; 0x56uy; 0x36uy; 0x85uy; 0x5duy; 0x32uy; 0xacuy;
		0x06uy; 0xf6uy; 0x9duy; 0x3cuy; 0x3auy; 0x59uy; 0xb6uy; 0x91uy;
		0xd2uy; 0xcbuy; 0xd2uy; 0x7duy; 0x1duy; 0x17uy; 0x28uy; 0x0buy;
		0x2cuy; 
	] in
  assert_norm(List.Tot.length l == 362);
  normalize_term l


inline_for_extraction noextract
let tv1_message_2: l:list uint8 {List.Tot.length l == 398}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x59uy;
		0x01uy; 0x8auy; 0x41uy; 0x97uy; 0x01uy; 0xd7uy; 0xf0uy; 0x0auy;
		0x26uy; 0xc2uy; 0xdcuy; 0x58uy; 0x7auy; 0x36uy; 0xdduy; 0x75uy;
		0x25uy; 0x49uy; 0xf3uy; 0x37uy; 0x63uy; 0xc8uy; 0x93uy; 0x42uy;
		0x2cuy; 0x8euy; 0xa0uy; 0xf9uy; 0x55uy; 0xa1uy; 0x3auy; 0x4fuy;
		0xf5uy; 0xd5uy; 0x7duy; 0x02uy; 0x33uy; 0x09uy; 0x36uy; 0xf6uy;
		0x0fuy; 0xbbuy; 0xe8uy; 0xabuy; 0x81uy; 0x87uy; 0x93uy; 0xb8uy;
		0x36uy; 0xffuy; 0xd0uy; 0x5euy; 0xd0uy; 0x82uy; 0x53uy; 0x1euy;
		0x26uy; 0xaauy; 0xc1uy; 0x8auy; 0xc7uy; 0x94uy; 0x4cuy; 0xb8uy;
		0x86uy; 0x0buy; 0xbfuy; 0xc6uy; 0xecuy; 0xccuy; 0x23uy; 0x07uy;
		0x40uy; 0x2fuy; 0xaauy; 0x92uy; 0x87uy; 0x1duy; 0x73uy; 0xeeuy;
		0x15uy; 0xa4uy; 0x35uy; 0x4euy; 0x1cuy; 0x48uy; 0xaduy; 0xd7uy;
		0xd8uy; 0x97uy; 0xeduy; 0xc3uy; 0xb2uy; 0x23uy; 0x64uy; 0x01uy;
		0x78uy; 0x49uy; 0xdfuy; 0xcfuy; 0xe4uy; 0x80uy; 0x0buy; 0xbbuy;
		0x16uy; 0x64uy; 0xf6uy; 0xd5uy; 0x9duy; 0x4euy; 0x9auy; 0x7buy;
		0x7euy; 0x1cuy; 0xecuy; 0x90uy; 0xa4uy; 0x31uy; 0xefuy; 0x96uy;
		0xb0uy; 0xf3uy; 0xc9uy; 0x0auy; 0xbbuy; 0x33uy; 0x3buy; 0xacuy;
		0xfeuy; 0x1fuy; 0xc1uy; 0x9duy; 0x3duy; 0xe6uy; 0x76uy; 0xdcuy;
		0xdbuy; 0x58uy; 0x3duy; 0x0duy; 0xa5uy; 0x5cuy; 0x6euy; 0xf8uy;
		0x5buy; 0x74uy; 0xeeuy; 0x22uy; 0xc6uy; 0xe8uy; 0x76uy; 0x1auy;
		0xebuy; 0xcauy; 0xd8uy; 0xd3uy; 0x6euy; 0x0auy; 0x52uy; 0xe0uy;
		0xc7uy; 0x9fuy; 0x7duy; 0x18uy; 0xa0uy; 0xfauy; 0x86uy; 0xf9uy;
		0x84uy; 0x41uy; 0x06uy; 0xc3uy; 0x1buy; 0xf2uy; 0xb0uy; 0x5cuy;
		0x62uy; 0xa3uy; 0x22uy; 0x62uy; 0x40uy; 0xa4uy; 0xb9uy; 0x83uy;
		0x94uy; 0x7fuy; 0x09uy; 0x05uy; 0x9duy; 0xdcuy; 0xf2uy; 0x4auy;
		0xeauy; 0xc3uy; 0x9cuy; 0x61uy; 0xa5uy; 0xf1uy; 0x82uy; 0xf4uy;
		0xa7uy; 0x97uy; 0x30uy; 0x5fuy; 0xc8uy; 0x0auy; 0x93uy; 0x5buy;
		0x7buy; 0x5duy; 0x57uy; 0x83uy; 0xaduy; 0x53uy; 0xd1uy; 0x80uy;
		0xe0uy; 0xbauy; 0x0cuy; 0xeeuy; 0x80uy; 0x4euy; 0xa6uy; 0x70uy;
		0x7cuy; 0x33uy; 0x64uy; 0x9auy; 0xbeuy; 0x64uy; 0x42uy; 0xe9uy;
		0xbauy; 0xd4uy; 0xaauy; 0xf7uy; 0xbfuy; 0x2euy; 0x8buy; 0xabuy;
		0x51uy; 0x0cuy; 0x20uy; 0xa5uy; 0xd2uy; 0x86uy; 0xbbuy; 0x0euy;
		0x79uy; 0x81uy; 0x31uy; 0x25uy; 0xb3uy; 0x86uy; 0x9cuy; 0x8duy;
		0x8euy; 0xfbuy; 0xdeuy; 0x50uy; 0xf5uy; 0x2cuy; 0x66uy; 0x25uy;
		0x48uy; 0x6duy; 0x82uy; 0xeeuy; 0x37uy; 0x3fuy; 0x46uy; 0x84uy;
		0xffuy; 0x84uy; 0x3cuy; 0xf1uy; 0x9auy; 0xf7uy; 0x65uy; 0xbfuy;
		0x86uy; 0xacuy; 0x5fuy; 0x69uy; 0x7duy; 0xdfuy; 0x26uy; 0x5euy;
		0x8fuy; 0x75uy; 0xb5uy; 0x92uy; 0x75uy; 0x59uy; 0x65uy; 0xa1uy;
		0x22uy; 0x97uy; 0xecuy; 0x32uy; 0x71uy; 0xaduy; 0xf3uy; 0xefuy;
		0x7cuy; 0x4euy; 0x6cuy; 0xd2uy; 0x9buy; 0x49uy; 0x5fuy; 0xcauy;
		0xe7uy; 0x41uy; 0x80uy; 0xb3uy; 0xfbuy; 0x50uy; 0x5duy; 0x09uy;
		0x4fuy; 0x5euy; 0xd0uy; 0xcbuy; 0x44uy; 0x74uy; 0x07uy; 0x49uy;
		0x98uy; 0xabuy; 0x0fuy; 0x4duy; 0x00uy; 0x45uy; 0x65uy; 0x8cuy;
		0x51uy; 0x23uy; 0x64uy; 0x29uy; 0xe6uy; 0x5cuy; 0x2fuy; 0xf1uy;
		0xb2uy; 0x2buy; 0xc4uy; 0x71uy; 0x23uy; 0x3auy; 0xa4uy; 0x26uy;
		0x72uy; 0xa5uy; 0xeduy; 0x40uy; 0x28uy; 0xdcuy; 0x5duy; 0x74uy;
		0x26uy; 0x0euy; 0x7fuy; 0x0euy; 0x08uy; 0xdauy; 0x5cuy; 0xa4uy;
		0xbfuy; 0x8cuy; 0x01uy; 0x8duy; 0x1buy; 0x56uy; 0x36uy; 0x85uy;
		0x5duy; 0x32uy; 0xacuy; 0x06uy; 0xf6uy; 0x9duy; 0x3cuy; 0x3auy;
		0x59uy; 0xb6uy; 0x91uy; 0xd2uy; 0xcbuy; 0xd2uy; 0x7duy; 0x1duy;
		0x17uy; 0x28uy; 0x0buy; 0x2cuy; 0x27uy; 
	] in
  assert_norm(List.Tot.length l == 398);
  normalize_term l


inline_for_extraction noextract
let tv1_salt_4e3m: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x61uy;
		0x5auy; 0xe4uy; 0xc6uy; 0xd5uy; 0xf2uy; 0x8buy; 0xc7uy; 0x69uy;
		0xf9uy; 0xf2uy; 0xf5uy; 0xdduy; 0x96uy; 0xdfuy; 0x30uy; 0x4euy;
		0x04uy; 0xcduy; 0xdbuy; 0x99uy; 0x1buy; 0xc3uy; 0xd8uy; 0x2euy;
		0x20uy; 0xaduy; 0x25uy; 0xd0uy; 0x55uy; 0x41uy; 0x6auy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_prk_4e3m_raw: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0xbauy;
		0xafuy; 0xccuy; 0x36uy; 0x99uy; 0x2fuy; 0x3auy; 0x12uy; 0x07uy;
		0x79uy; 0xa2uy; 0xb6uy; 0xeauy; 0x68uy; 0xd5uy; 0xc6uy; 0xfduy;
		0xeauy; 0x1euy; 0x6euy; 0x30uy; 0xc0uy; 0xaauy; 0xbeuy; 0x7fuy;
		0x90uy; 0xd9uy; 0xb5uy; 0x78uy; 0xffuy; 0x19uy; 0x7buy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_input_TH_3: l:list uint8 {List.Tot.length l == 689}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x58uy;
		0x20uy; 0xe9uy; 0x2buy; 0x4buy; 0x36uy; 0x43uy; 0x1euy; 0xffuy;
		0x85uy; 0xbauy; 0xeduy; 0x58uy; 0x8fuy; 0x1buy; 0x72uy; 0x6euy;
		0x46uy; 0xbcuy; 0xb4uy; 0x4duy; 0x60uy; 0xa9uy; 0xd6uy; 0x87uy;
		0xc1uy; 0x3auy; 0xb2uy; 0xd9uy; 0x2fuy; 0x92uy; 0xfbuy; 0xabuy;
		0xa6uy; 0xa1uy; 0x18uy; 0x21uy; 0x59uy; 0x01uy; 0x22uy; 0x30uy;
		0x82uy; 0x01uy; 0x1euy; 0x30uy; 0x81uy; 0xc5uy; 0xa0uy; 0x03uy;
		0x02uy; 0x01uy; 0x02uy; 0x02uy; 0x04uy; 0x61uy; 0xe9uy; 0x98uy;
		0x1euy; 0x30uy; 0x0auy; 0x06uy; 0x08uy; 0x2auy; 0x86uy; 0x48uy;
		0xceuy; 0x3duy; 0x04uy; 0x03uy; 0x02uy; 0x30uy; 0x15uy; 0x31uy;
		0x13uy; 0x30uy; 0x11uy; 0x06uy; 0x03uy; 0x55uy; 0x04uy; 0x03uy;
		0x0cuy; 0x0auy; 0x45uy; 0x44uy; 0x48uy; 0x4fuy; 0x43uy; 0x20uy;
		0x52uy; 0x6fuy; 0x6fuy; 0x74uy; 0x30uy; 0x1euy; 0x17uy; 0x0duy;
		0x32uy; 0x32uy; 0x30uy; 0x31uy; 0x32uy; 0x30uy; 0x31uy; 0x37uy;
		0x31uy; 0x33uy; 0x30uy; 0x32uy; 0x5auy; 0x17uy; 0x0duy; 0x32uy;
		0x39uy; 0x31uy; 0x32uy; 0x33uy; 0x31uy; 0x32uy; 0x33uy; 0x30uy;
		0x30uy; 0x30uy; 0x30uy; 0x5auy; 0x30uy; 0x1auy; 0x31uy; 0x18uy;
		0x30uy; 0x16uy; 0x06uy; 0x03uy; 0x55uy; 0x04uy; 0x03uy; 0x0cuy;
		0x0fuy; 0x45uy; 0x44uy; 0x48uy; 0x4fuy; 0x43uy; 0x20uy; 0x52uy;
		0x65uy; 0x73uy; 0x70uy; 0x6fuy; 0x6euy; 0x64uy; 0x65uy; 0x72uy;
		0x30uy; 0x59uy; 0x30uy; 0x13uy; 0x06uy; 0x07uy; 0x2auy; 0x86uy;
		0x48uy; 0xceuy; 0x3duy; 0x02uy; 0x01uy; 0x06uy; 0x08uy; 0x2auy;
		0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x03uy; 0x01uy; 0x07uy; 0x03uy;
		0x42uy; 0x00uy; 0x04uy; 0xbbuy; 0xc3uy; 0x49uy; 0x60uy; 0x52uy;
		0x6euy; 0xa4uy; 0xd3uy; 0x2euy; 0x94uy; 0x0cuy; 0xaduy; 0x2auy;
		0x23uy; 0x41uy; 0x48uy; 0xdduy; 0xc2uy; 0x17uy; 0x91uy; 0xa1uy;
		0x2auy; 0xfbuy; 0xcbuy; 0xacuy; 0x93uy; 0x62uy; 0x20uy; 0x46uy;
		0xdduy; 0x44uy; 0xf0uy; 0x45uy; 0x19uy; 0xe2uy; 0x57uy; 0x23uy;
		0x6buy; 0x2auy; 0x0cuy; 0xe2uy; 0x02uy; 0x3fuy; 0x09uy; 0x31uy;
		0xf1uy; 0xf3uy; 0x86uy; 0xcauy; 0x7auy; 0xfduy; 0xa6uy; 0x4fuy;
		0xcduy; 0xe0uy; 0x10uy; 0x8cuy; 0x22uy; 0x4cuy; 0x51uy; 0xeauy;
		0xbfuy; 0x60uy; 0x72uy; 0x30uy; 0x0auy; 0x06uy; 0x08uy; 0x2auy;
		0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x04uy; 0x03uy; 0x02uy; 0x03uy;
		0x48uy; 0x00uy; 0x30uy; 0x45uy; 0x02uy; 0x20uy; 0x30uy; 0x19uy;
		0x4euy; 0xf5uy; 0xfcuy; 0x65uy; 0xc8uy; 0xb7uy; 0x95uy; 0xcduy;
		0xcduy; 0x0buy; 0xb4uy; 0x31uy; 0xbfuy; 0x83uy; 0xeeuy; 0x67uy;
		0x41uy; 0xc1uy; 0x37uy; 0x0cuy; 0x22uy; 0xc8uy; 0xebuy; 0x8euy;
		0xe9uy; 0xeduy; 0xd2uy; 0xa7uy; 0x05uy; 0x19uy; 0x02uy; 0x21uy;
		0x00uy; 0xb5uy; 0x83uy; 0x0euy; 0x9cuy; 0x89uy; 0xa6uy; 0x2auy;
		0xc7uy; 0x3cuy; 0xe1uy; 0xebuy; 0xceuy; 0x00uy; 0x61uy; 0x70uy;
		0x7duy; 0xb8uy; 0xa8uy; 0x8euy; 0x23uy; 0x70uy; 0x9buy; 0x4auy;
		0xccuy; 0x58uy; 0xa1uy; 0x31uy; 0x3buy; 0x13uy; 0x3duy; 0x05uy;
		0x58uy; 0x58uy; 0x40uy; 0xa3uy; 0x0auy; 0x50uy; 0x5duy; 0x87uy;
		0x36uy; 0x91uy; 0xf4uy; 0xe5uy; 0x79uy; 0x21uy; 0x33uy; 0xf6uy;
		0xfduy; 0x42uy; 0x0fuy; 0x1euy; 0x77uy; 0x25uy; 0x56uy; 0x2buy;
		0xe4uy; 0xeeuy; 0x47uy; 0x10uy; 0xa9uy; 0x5duy; 0x43uy; 0xaduy;
		0x17uy; 0x17uy; 0xafuy; 0xdeuy; 0x10uy; 0xe1uy; 0x48uy; 0xbeuy;
		0x76uy; 0x4euy; 0xfcuy; 0x51uy; 0xafuy; 0x3buy; 0x74uy; 0x80uy;
		0xbcuy; 0xf8uy; 0xf2uy; 0x93uy; 0x8euy; 0xc7uy; 0x55uy; 0x00uy;
		0xeduy; 0xb7uy; 0xaauy; 0x5buy; 0x9euy; 0xcbuy; 0x3cuy; 0xaduy;
		0xbfuy; 0x96uy; 0xfduy; 0x59uy; 0x01uy; 0x22uy; 0x30uy; 0x82uy;
		0x01uy; 0x1euy; 0x30uy; 0x81uy; 0xc5uy; 0xa0uy; 0x03uy; 0x02uy;
		0x01uy; 0x02uy; 0x02uy; 0x04uy; 0x61uy; 0xe9uy; 0x98uy; 0x1euy;
		0x30uy; 0x0auy; 0x06uy; 0x08uy; 0x2auy; 0x86uy; 0x48uy; 0xceuy;
		0x3duy; 0x04uy; 0x03uy; 0x02uy; 0x30uy; 0x15uy; 0x31uy; 0x13uy;
		0x30uy; 0x11uy; 0x06uy; 0x03uy; 0x55uy; 0x04uy; 0x03uy; 0x0cuy;
		0x0auy; 0x45uy; 0x44uy; 0x48uy; 0x4fuy; 0x43uy; 0x20uy; 0x52uy;
		0x6fuy; 0x6fuy; 0x74uy; 0x30uy; 0x1euy; 0x17uy; 0x0duy; 0x32uy;
		0x32uy; 0x30uy; 0x31uy; 0x32uy; 0x30uy; 0x31uy; 0x37uy; 0x31uy;
		0x33uy; 0x30uy; 0x32uy; 0x5auy; 0x17uy; 0x0duy; 0x32uy; 0x39uy;
		0x31uy; 0x32uy; 0x33uy; 0x31uy; 0x32uy; 0x33uy; 0x30uy; 0x30uy;
		0x30uy; 0x30uy; 0x5auy; 0x30uy; 0x1auy; 0x31uy; 0x18uy; 0x30uy;
		0x16uy; 0x06uy; 0x03uy; 0x55uy; 0x04uy; 0x03uy; 0x0cuy; 0x0fuy;
		0x45uy; 0x44uy; 0x48uy; 0x4fuy; 0x43uy; 0x20uy; 0x52uy; 0x65uy;
		0x73uy; 0x70uy; 0x6fuy; 0x6euy; 0x64uy; 0x65uy; 0x72uy; 0x30uy;
		0x59uy; 0x30uy; 0x13uy; 0x06uy; 0x07uy; 0x2auy; 0x86uy; 0x48uy;
		0xceuy; 0x3duy; 0x02uy; 0x01uy; 0x06uy; 0x08uy; 0x2auy; 0x86uy;
		0x48uy; 0xceuy; 0x3duy; 0x03uy; 0x01uy; 0x07uy; 0x03uy; 0x42uy;
		0x00uy; 0x04uy; 0xbbuy; 0xc3uy; 0x49uy; 0x60uy; 0x52uy; 0x6euy;
		0xa4uy; 0xd3uy; 0x2euy; 0x94uy; 0x0cuy; 0xaduy; 0x2auy; 0x23uy;
		0x41uy; 0x48uy; 0xdduy; 0xc2uy; 0x17uy; 0x91uy; 0xa1uy; 0x2auy;
		0xfbuy; 0xcbuy; 0xacuy; 0x93uy; 0x62uy; 0x20uy; 0x46uy; 0xdduy;
		0x44uy; 0xf0uy; 0x45uy; 0x19uy; 0xe2uy; 0x57uy; 0x23uy; 0x6buy;
		0x2auy; 0x0cuy; 0xe2uy; 0x02uy; 0x3fuy; 0x09uy; 0x31uy; 0xf1uy;
		0xf3uy; 0x86uy; 0xcauy; 0x7auy; 0xfduy; 0xa6uy; 0x4fuy; 0xcduy;
		0xe0uy; 0x10uy; 0x8cuy; 0x22uy; 0x4cuy; 0x51uy; 0xeauy; 0xbfuy;
		0x60uy; 0x72uy; 0x30uy; 0x0auy; 0x06uy; 0x08uy; 0x2auy; 0x86uy;
		0x48uy; 0xceuy; 0x3duy; 0x04uy; 0x03uy; 0x02uy; 0x03uy; 0x48uy;
		0x00uy; 0x30uy; 0x45uy; 0x02uy; 0x20uy; 0x30uy; 0x19uy; 0x4euy;
		0xf5uy; 0xfcuy; 0x65uy; 0xc8uy; 0xb7uy; 0x95uy; 0xcduy; 0xcduy;
		0x0buy; 0xb4uy; 0x31uy; 0xbfuy; 0x83uy; 0xeeuy; 0x67uy; 0x41uy;
		0xc1uy; 0x37uy; 0x0cuy; 0x22uy; 0xc8uy; 0xebuy; 0x8euy; 0xe9uy;
		0xeduy; 0xd2uy; 0xa7uy; 0x05uy; 0x19uy; 0x02uy; 0x21uy; 0x00uy;
		0xb5uy; 0x83uy; 0x0euy; 0x9cuy; 0x89uy; 0xa6uy; 0x2auy; 0xc7uy;
		0x3cuy; 0xe1uy; 0xebuy; 0xceuy; 0x00uy; 0x61uy; 0x70uy; 0x7duy;
		0xb8uy; 0xa8uy; 0x8euy; 0x23uy; 0x70uy; 0x9buy; 0x4auy; 0xccuy;
		0x58uy; 0xa1uy; 0x31uy; 0x3buy; 0x13uy; 0x3duy; 0x05uy; 0x58uy;
		
	] in
  assert_norm(List.Tot.length l == 689);
  normalize_term l


inline_for_extraction noextract
let tv1_th_3_raw: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x7buy;
		0x7duy; 0xa5uy; 0x33uy; 0xcfuy; 0x9auy; 0x6duy; 0x0auy; 0x0euy;
		0xbduy; 0x0buy; 0xd3uy; 0x0cuy; 0x8buy; 0x48uy; 0xc4uy; 0x4duy;
		0x12uy; 0x3duy; 0xd1uy; 0x39uy; 0xf0uy; 0x05uy; 0x29uy; 0x8cuy;
		0xf2uy; 0x7buy; 0x48uy; 0x7fuy; 0x78uy; 0x32uy; 0x2fuy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_id_cred_i: l:list uint8 {List.Tot.length l == 296}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0xa1uy;
		0x18uy; 0x21uy; 0x59uy; 0x01uy; 0x22uy; 0x30uy; 0x82uy; 0x01uy;
		0x1euy; 0x30uy; 0x81uy; 0xc5uy; 0xa0uy; 0x03uy; 0x02uy; 0x01uy;
		0x02uy; 0x02uy; 0x04uy; 0x62uy; 0x32uy; 0xefuy; 0x6fuy; 0x30uy;
		0x0auy; 0x06uy; 0x08uy; 0x2auy; 0x86uy; 0x48uy; 0xceuy; 0x3duy;
		0x04uy; 0x03uy; 0x02uy; 0x30uy; 0x15uy; 0x31uy; 0x13uy; 0x30uy;
		0x11uy; 0x06uy; 0x03uy; 0x55uy; 0x04uy; 0x03uy; 0x0cuy; 0x0auy;
		0x45uy; 0x44uy; 0x48uy; 0x4fuy; 0x43uy; 0x20uy; 0x52uy; 0x6fuy;
		0x6fuy; 0x74uy; 0x30uy; 0x1euy; 0x17uy; 0x0duy; 0x32uy; 0x32uy;
		0x30uy; 0x33uy; 0x31uy; 0x37uy; 0x30uy; 0x38uy; 0x32uy; 0x31uy;
		0x30uy; 0x33uy; 0x5auy; 0x17uy; 0x0duy; 0x32uy; 0x39uy; 0x31uy;
		0x32uy; 0x33uy; 0x31uy; 0x32uy; 0x33uy; 0x30uy; 0x30uy; 0x30uy;
		0x30uy; 0x5auy; 0x30uy; 0x1auy; 0x31uy; 0x18uy; 0x30uy; 0x16uy;
		0x06uy; 0x03uy; 0x55uy; 0x04uy; 0x03uy; 0x0cuy; 0x0fuy; 0x45uy;
		0x44uy; 0x48uy; 0x4fuy; 0x43uy; 0x20uy; 0x49uy; 0x6euy; 0x69uy;
		0x74uy; 0x69uy; 0x61uy; 0x74uy; 0x6fuy; 0x72uy; 0x30uy; 0x59uy;
		0x30uy; 0x13uy; 0x06uy; 0x07uy; 0x2auy; 0x86uy; 0x48uy; 0xceuy;
		0x3duy; 0x02uy; 0x01uy; 0x06uy; 0x08uy; 0x2auy; 0x86uy; 0x48uy;
		0xceuy; 0x3duy; 0x03uy; 0x01uy; 0x07uy; 0x03uy; 0x42uy; 0x00uy;
		0x04uy; 0xacuy; 0x75uy; 0xe9uy; 0xecuy; 0xe3uy; 0xe5uy; 0x0buy;
		0xfcuy; 0x8euy; 0xd6uy; 0x03uy; 0x99uy; 0x88uy; 0x95uy; 0x22uy;
		0x40uy; 0x5cuy; 0x47uy; 0xbfuy; 0x16uy; 0xdfuy; 0x96uy; 0x66uy;
		0x0auy; 0x41uy; 0x29uy; 0x8cuy; 0xb4uy; 0x30uy; 0x7fuy; 0x7euy;
		0xb6uy; 0x6euy; 0x5duy; 0xe6uy; 0x11uy; 0x38uy; 0x8auy; 0x4buy;
		0x8auy; 0x82uy; 0x11uy; 0x33uy; 0x4auy; 0xc7uy; 0xd3uy; 0x7euy;
		0xcbuy; 0x52uy; 0xa3uy; 0x87uy; 0xd2uy; 0x57uy; 0xe6uy; 0xdbuy;
		0x3cuy; 0x2auy; 0x93uy; 0xdfuy; 0x21uy; 0xffuy; 0x3auy; 0xffuy;
		0xc8uy; 0x30uy; 0x0auy; 0x06uy; 0x08uy; 0x2auy; 0x86uy; 0x48uy;
		0xceuy; 0x3duy; 0x04uy; 0x03uy; 0x02uy; 0x03uy; 0x48uy; 0x00uy;
		0x30uy; 0x45uy; 0x02uy; 0x21uy; 0x00uy; 0x8cuy; 0x32uy; 0x3auy;
		0x1fuy; 0x33uy; 0x21uy; 0x38uy; 0xaauy; 0xb9uy; 0xd0uy; 0xbeuy;
		0xafuy; 0xb8uy; 0x5fuy; 0x8duy; 0x5auy; 0x44uy; 0x07uy; 0x3cuy;
		0x58uy; 0x0fuy; 0x59uy; 0x5buy; 0xc5uy; 0x21uy; 0xefuy; 0x91uy;
		0x3fuy; 0x6euy; 0xf4uy; 0x8duy; 0x11uy; 0x02uy; 0x20uy; 0x6cuy;
		0x0auy; 0xf1uy; 0xa1uy; 0x85uy; 0xa4uy; 0xe4uy; 0xdeuy; 0x06uy;
		0x35uy; 0x36uy; 0x99uy; 0x23uy; 0x1cuy; 0x73uy; 0x3auy; 0x6euy;
		0x8duy; 0xd2uy; 0xdfuy; 0x65uy; 0x13uy; 0x96uy; 0x6cuy; 0x91uy;
		0x30uy; 0x15uy; 0x2auy; 0x07uy; 0xa2uy; 0xbeuy; 0xdeuy; 
	] in
  assert_norm(List.Tot.length l == 296);
  normalize_term l


inline_for_extraction noextract
let tv1_info_mac_3: l:list uint8 {List.Tot.length l == 629}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x06uy;
		0x59uy; 0x02uy; 0x6fuy; 0xa1uy; 0x18uy; 0x21uy; 0x59uy; 0x01uy;
		0x22uy; 0x30uy; 0x82uy; 0x01uy; 0x1euy; 0x30uy; 0x81uy; 0xc5uy;
		0xa0uy; 0x03uy; 0x02uy; 0x01uy; 0x02uy; 0x02uy; 0x04uy; 0x62uy;
		0x32uy; 0xefuy; 0x6fuy; 0x30uy; 0x0auy; 0x06uy; 0x08uy; 0x2auy;
		0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x04uy; 0x03uy; 0x02uy; 0x30uy;
		0x15uy; 0x31uy; 0x13uy; 0x30uy; 0x11uy; 0x06uy; 0x03uy; 0x55uy;
		0x04uy; 0x03uy; 0x0cuy; 0x0auy; 0x45uy; 0x44uy; 0x48uy; 0x4fuy;
		0x43uy; 0x20uy; 0x52uy; 0x6fuy; 0x6fuy; 0x74uy; 0x30uy; 0x1euy;
		0x17uy; 0x0duy; 0x32uy; 0x32uy; 0x30uy; 0x33uy; 0x31uy; 0x37uy;
		0x30uy; 0x38uy; 0x32uy; 0x31uy; 0x30uy; 0x33uy; 0x5auy; 0x17uy;
		0x0duy; 0x32uy; 0x39uy; 0x31uy; 0x32uy; 0x33uy; 0x31uy; 0x32uy;
		0x33uy; 0x30uy; 0x30uy; 0x30uy; 0x30uy; 0x5auy; 0x30uy; 0x1auy;
		0x31uy; 0x18uy; 0x30uy; 0x16uy; 0x06uy; 0x03uy; 0x55uy; 0x04uy;
		0x03uy; 0x0cuy; 0x0fuy; 0x45uy; 0x44uy; 0x48uy; 0x4fuy; 0x43uy;
		0x20uy; 0x49uy; 0x6euy; 0x69uy; 0x74uy; 0x69uy; 0x61uy; 0x74uy;
		0x6fuy; 0x72uy; 0x30uy; 0x59uy; 0x30uy; 0x13uy; 0x06uy; 0x07uy;
		0x2auy; 0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x02uy; 0x01uy; 0x06uy;
		0x08uy; 0x2auy; 0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x03uy; 0x01uy;
		0x07uy; 0x03uy; 0x42uy; 0x00uy; 0x04uy; 0xacuy; 0x75uy; 0xe9uy;
		0xecuy; 0xe3uy; 0xe5uy; 0x0buy; 0xfcuy; 0x8euy; 0xd6uy; 0x03uy;
		0x99uy; 0x88uy; 0x95uy; 0x22uy; 0x40uy; 0x5cuy; 0x47uy; 0xbfuy;
		0x16uy; 0xdfuy; 0x96uy; 0x66uy; 0x0auy; 0x41uy; 0x29uy; 0x8cuy;
		0xb4uy; 0x30uy; 0x7fuy; 0x7euy; 0xb6uy; 0x6euy; 0x5duy; 0xe6uy;
		0x11uy; 0x38uy; 0x8auy; 0x4buy; 0x8auy; 0x82uy; 0x11uy; 0x33uy;
		0x4auy; 0xc7uy; 0xd3uy; 0x7euy; 0xcbuy; 0x52uy; 0xa3uy; 0x87uy;
		0xd2uy; 0x57uy; 0xe6uy; 0xdbuy; 0x3cuy; 0x2auy; 0x93uy; 0xdfuy;
		0x21uy; 0xffuy; 0x3auy; 0xffuy; 0xc8uy; 0x30uy; 0x0auy; 0x06uy;
		0x08uy; 0x2auy; 0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x04uy; 0x03uy;
		0x02uy; 0x03uy; 0x48uy; 0x00uy; 0x30uy; 0x45uy; 0x02uy; 0x21uy;
		0x00uy; 0x8cuy; 0x32uy; 0x3auy; 0x1fuy; 0x33uy; 0x21uy; 0x38uy;
		0xaauy; 0xb9uy; 0xd0uy; 0xbeuy; 0xafuy; 0xb8uy; 0x5fuy; 0x8duy;
		0x5auy; 0x44uy; 0x07uy; 0x3cuy; 0x58uy; 0x0fuy; 0x59uy; 0x5buy;
		0xc5uy; 0x21uy; 0xefuy; 0x91uy; 0x3fuy; 0x6euy; 0xf4uy; 0x8duy;
		0x11uy; 0x02uy; 0x20uy; 0x6cuy; 0x0auy; 0xf1uy; 0xa1uy; 0x85uy;
		0xa4uy; 0xe4uy; 0xdeuy; 0x06uy; 0x35uy; 0x36uy; 0x99uy; 0x23uy;
		0x1cuy; 0x73uy; 0x3auy; 0x6euy; 0x8duy; 0xd2uy; 0xdfuy; 0x65uy;
		0x13uy; 0x96uy; 0x6cuy; 0x91uy; 0x30uy; 0x15uy; 0x2auy; 0x07uy;
		0xa2uy; 0xbeuy; 0xdeuy; 0x58uy; 0x20uy; 0x7buy; 0x7duy; 0xa5uy;
		0x33uy; 0xcfuy; 0x9auy; 0x6duy; 0x0auy; 0x0euy; 0xbduy; 0x0buy;
		0xd3uy; 0x0cuy; 0x8buy; 0x48uy; 0xc4uy; 0x4duy; 0x12uy; 0x3duy;
		0xd1uy; 0x39uy; 0xf0uy; 0x05uy; 0x29uy; 0x8cuy; 0xf2uy; 0x7buy;
		0x48uy; 0x7fuy; 0x78uy; 0x32uy; 0x2fuy; 0x59uy; 0x01uy; 0x22uy;
		0x30uy; 0x82uy; 0x01uy; 0x1euy; 0x30uy; 0x81uy; 0xc5uy; 0xa0uy;
		0x03uy; 0x02uy; 0x01uy; 0x02uy; 0x02uy; 0x04uy; 0x62uy; 0x32uy;
		0xefuy; 0x6fuy; 0x30uy; 0x0auy; 0x06uy; 0x08uy; 0x2auy; 0x86uy;
		0x48uy; 0xceuy; 0x3duy; 0x04uy; 0x03uy; 0x02uy; 0x30uy; 0x15uy;
		0x31uy; 0x13uy; 0x30uy; 0x11uy; 0x06uy; 0x03uy; 0x55uy; 0x04uy;
		0x03uy; 0x0cuy; 0x0auy; 0x45uy; 0x44uy; 0x48uy; 0x4fuy; 0x43uy;
		0x20uy; 0x52uy; 0x6fuy; 0x6fuy; 0x74uy; 0x30uy; 0x1euy; 0x17uy;
		0x0duy; 0x32uy; 0x32uy; 0x30uy; 0x33uy; 0x31uy; 0x37uy; 0x30uy;
		0x38uy; 0x32uy; 0x31uy; 0x30uy; 0x33uy; 0x5auy; 0x17uy; 0x0duy;
		0x32uy; 0x39uy; 0x31uy; 0x32uy; 0x33uy; 0x31uy; 0x32uy; 0x33uy;
		0x30uy; 0x30uy; 0x30uy; 0x30uy; 0x5auy; 0x30uy; 0x1auy; 0x31uy;
		0x18uy; 0x30uy; 0x16uy; 0x06uy; 0x03uy; 0x55uy; 0x04uy; 0x03uy;
		0x0cuy; 0x0fuy; 0x45uy; 0x44uy; 0x48uy; 0x4fuy; 0x43uy; 0x20uy;
		0x49uy; 0x6euy; 0x69uy; 0x74uy; 0x69uy; 0x61uy; 0x74uy; 0x6fuy;
		0x72uy; 0x30uy; 0x59uy; 0x30uy; 0x13uy; 0x06uy; 0x07uy; 0x2auy;
		0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x02uy; 0x01uy; 0x06uy; 0x08uy;
		0x2auy; 0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x03uy; 0x01uy; 0x07uy;
		0x03uy; 0x42uy; 0x00uy; 0x04uy; 0xacuy; 0x75uy; 0xe9uy; 0xecuy;
		0xe3uy; 0xe5uy; 0x0buy; 0xfcuy; 0x8euy; 0xd6uy; 0x03uy; 0x99uy;
		0x88uy; 0x95uy; 0x22uy; 0x40uy; 0x5cuy; 0x47uy; 0xbfuy; 0x16uy;
		0xdfuy; 0x96uy; 0x66uy; 0x0auy; 0x41uy; 0x29uy; 0x8cuy; 0xb4uy;
		0x30uy; 0x7fuy; 0x7euy; 0xb6uy; 0x6euy; 0x5duy; 0xe6uy; 0x11uy;
		0x38uy; 0x8auy; 0x4buy; 0x8auy; 0x82uy; 0x11uy; 0x33uy; 0x4auy;
		0xc7uy; 0xd3uy; 0x7euy; 0xcbuy; 0x52uy; 0xa3uy; 0x87uy; 0xd2uy;
		0x57uy; 0xe6uy; 0xdbuy; 0x3cuy; 0x2auy; 0x93uy; 0xdfuy; 0x21uy;
		0xffuy; 0x3auy; 0xffuy; 0xc8uy; 0x30uy; 0x0auy; 0x06uy; 0x08uy;
		0x2auy; 0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x04uy; 0x03uy; 0x02uy;
		0x03uy; 0x48uy; 0x00uy; 0x30uy; 0x45uy; 0x02uy; 0x21uy; 0x00uy;
		0x8cuy; 0x32uy; 0x3auy; 0x1fuy; 0x33uy; 0x21uy; 0x38uy; 0xaauy;
		0xb9uy; 0xd0uy; 0xbeuy; 0xafuy; 0xb8uy; 0x5fuy; 0x8duy; 0x5auy;
		0x44uy; 0x07uy; 0x3cuy; 0x58uy; 0x0fuy; 0x59uy; 0x5buy; 0xc5uy;
		0x21uy; 0xefuy; 0x91uy; 0x3fuy; 0x6euy; 0xf4uy; 0x8duy; 0x11uy;
		0x02uy; 0x20uy; 0x6cuy; 0x0auy; 0xf1uy; 0xa1uy; 0x85uy; 0xa4uy;
		0xe4uy; 0xdeuy; 0x06uy; 0x35uy; 0x36uy; 0x99uy; 0x23uy; 0x1cuy;
		0x73uy; 0x3auy; 0x6euy; 0x8duy; 0xd2uy; 0xdfuy; 0x65uy; 0x13uy;
		0x96uy; 0x6cuy; 0x91uy; 0x30uy; 0x15uy; 0x2auy; 0x07uy; 0xa2uy;
		0xbeuy; 0xdeuy; 0x18uy; 0x20uy; 
	] in
  assert_norm(List.Tot.length l == 629);
  normalize_term l


inline_for_extraction noextract
let tv1_mac_3_raw: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x19uy;
		0x8duy; 0x8cuy; 0x6duy; 0xb6uy; 0x47uy; 0x38uy; 0x7duy; 0xcbuy;
		0x79uy; 0x6euy; 0xb5uy; 0xfbuy; 0x54uy; 0xceuy; 0x16uy; 0x64uy;
		0x97uy; 0x91uy; 0x6auy; 0xceuy; 0x5buy; 0x58uy; 0x58uy; 0x29uy;
		0x61uy; 0xf9uy; 0xf3uy; 0x2euy; 0x55uy; 0x24uy; 0x09uy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_sig_or_mac_3_raw: l:list uint8 {List.Tot.length l == 64}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0xa5uy;
		0x1euy; 0x90uy; 0x22uy; 0x19uy; 0x76uy; 0x4duy; 0xb3uy; 0xe2uy;
		0xb5uy; 0xb1uy; 0xb1uy; 0xf8uy; 0x84uy; 0xb0uy; 0x4duy; 0xb5uy;
		0xdbuy; 0x1duy; 0x63uy; 0x11uy; 0x72uy; 0x13uy; 0x6fuy; 0x4buy;
		0x0fuy; 0xf1uy; 0x92uy; 0x7fuy; 0xa4uy; 0xf3uy; 0x81uy; 0x05uy;
		0x1cuy; 0xecuy; 0xafuy; 0x0euy; 0x11uy; 0xb7uy; 0x17uy; 0xa9uy;
		0xc5uy; 0x4fuy; 0xf4uy; 0xd7uy; 0x40uy; 0x32uy; 0xe0uy; 0xb7uy;
		0xabuy; 0xeduy; 0x45uy; 0x9fuy; 0xe5uy; 0x78uy; 0xe8uy; 0xe6uy;
		0x8euy; 0x97uy; 0x70uy; 0x2auy; 0x11uy; 0x62uy; 0xdbuy; 
	] in
  assert_norm(List.Tot.length l == 64);
  normalize_term l


inline_for_extraction noextract
let tv1_k_3_raw: l:list uint8 {List.Tot.length l == 16}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x89uy;
		0x31uy; 0x3euy; 0x97uy; 0x37uy; 0x0duy; 0xb3uy; 0x73uy; 0xa9uy;
		0xbfuy; 0x55uy; 0x32uy; 0xc7uy; 0xc2uy; 0xcbuy; 0x18uy; 
	] in
  assert_norm(List.Tot.length l == 16);
  normalize_term l


inline_for_extraction noextract
let tv1_info_iv_3: l:list uint8 {List.Tot.length l == 36}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x04uy;
		0x58uy; 0x20uy; 0x7buy; 0x7duy; 0xa5uy; 0x33uy; 0xcfuy; 0x9auy;
		0x6duy; 0x0auy; 0x0euy; 0xbduy; 0x0buy; 0xd3uy; 0x0cuy; 0x8buy;
		0x48uy; 0xc4uy; 0x4duy; 0x12uy; 0x3duy; 0xd1uy; 0x39uy; 0xf0uy;
		0x05uy; 0x29uy; 0x8cuy; 0xf2uy; 0x7buy; 0x48uy; 0x7fuy; 0x78uy;
		0x32uy; 0x2fuy; 0x0duy; 
	] in
  assert_norm(List.Tot.length l == 36);
  normalize_term l


inline_for_extraction noextract
let tv1_iv_3_raw: l:list uint8 {List.Tot.length l == 13}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0xf7uy;
		0xe8uy; 0x47uy; 0xe4uy; 0x2euy; 0x1auy; 0xaauy; 0x84uy; 0x3auy;
		0xd4uy; 0x71uy; 0xfbuy; 0x69uy; 
	] in
  assert_norm(List.Tot.length l == 13);
  normalize_term l


inline_for_extraction noextract
let tv1_ciphertext_3_raw: l:list uint8 {List.Tot.length l == 370}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x0duy;
		0x88uy; 0x60uy; 0xa9uy; 0x45uy; 0x42uy; 0x4euy; 0x80uy; 0x4euy;
		0xc9uy; 0xe5uy; 0xb7uy; 0x3buy; 0xfcuy; 0xcauy; 0x34uy; 0x8auy;
		0xbeuy; 0xd8uy; 0xaeuy; 0xc6uy; 0x46uy; 0x40uy; 0x3buy; 0x54uy;
		0x78uy; 0xbbuy; 0x4duy; 0x2euy; 0xb7uy; 0xd1uy; 0x04uy; 0xdauy;
		0xabuy; 0xa1uy; 0x1euy; 0x5auy; 0x16uy; 0xa3uy; 0x86uy; 0x34uy;
		0x5cuy; 0xf2uy; 0xdeuy; 0x5duy; 0x16uy; 0x01uy; 0x43uy; 0xc4uy;
		0xa1uy; 0x1auy; 0x17uy; 0xa2uy; 0xb3uy; 0x38uy; 0x6duy; 0x63uy;
		0x28uy; 0xf5uy; 0x0duy; 0x02uy; 0xe8uy; 0x2buy; 0x9auy; 0x19uy;
		0xfcuy; 0x96uy; 0x60uy; 0xe4uy; 0x7cuy; 0xd6uy; 0xcfuy; 0x3duy;
		0x98uy; 0x6duy; 0xa1uy; 0xbbuy; 0x69uy; 0xfeuy; 0x9auy; 0x12uy;
		0x19uy; 0x3buy; 0x7fuy; 0x21uy; 0x6duy; 0x31uy; 0x8duy; 0x7auy;
		0x1cuy; 0xb2uy; 0x3cuy; 0xa2uy; 0x88uy; 0x34uy; 0x75uy; 0x7buy;
		0xa9uy; 0xd6uy; 0xdduy; 0x06uy; 0x45uy; 0x9fuy; 0xbbuy; 0xf1uy;
		0xf1uy; 0xb4uy; 0xd1uy; 0x92uy; 0x76uy; 0xa9uy; 0xbfuy; 0xf8uy;
		0x3auy; 0x0cuy; 0x7buy; 0x55uy; 0x52uy; 0x2duy; 0xacuy; 0x00uy;
		0x0fuy; 0x92uy; 0x59uy; 0x59uy; 0xf2uy; 0x2cuy; 0xa1uy; 0x5cuy;
		0xb0uy; 0xc5uy; 0x8buy; 0xacuy; 0x51uy; 0x38uy; 0x2euy; 0xa8uy;
		0x4cuy; 0x3cuy; 0xf9uy; 0x24uy; 0xcduy; 0x73uy; 0x9buy; 0xdbuy;
		0x07uy; 0x23uy; 0x9duy; 0x99uy; 0x4auy; 0xf7uy; 0xfauy; 0xdbuy;
		0x63uy; 0xe2uy; 0x5buy; 0xf9uy; 0x27uy; 0xf2uy; 0xa7uy; 0x27uy;
		0xe7uy; 0x30uy; 0xfbuy; 0xcfuy; 0x16uy; 0xc3uy; 0xecuy; 0xe1uy;
		0x0euy; 0x83uy; 0xebuy; 0x19uy; 0x82uy; 0x1duy; 0x0cuy; 0x2auy;
		0x2duy; 0xccuy; 0xdduy; 0xf4uy; 0xc1uy; 0x5auy; 0x47uy; 0x55uy;
		0x6fuy; 0x76uy; 0xb1uy; 0xb1uy; 0xf3uy; 0x93uy; 0xfcuy; 0xa9uy;
		0x28uy; 0x13uy; 0xa8uy; 0xaauy; 0x79uy; 0xdfuy; 0x4fuy; 0x2euy;
		0x26uy; 0xd6uy; 0x75uy; 0xc1uy; 0xe1uy; 0x5cuy; 0x4duy; 0xc6uy;
		0x0euy; 0xb3uy; 0xe4uy; 0xcbuy; 0x01uy; 0xe5uy; 0x95uy; 0x22uy;
		0xdauy; 0x10uy; 0xcfuy; 0x0euy; 0x43uy; 0x9euy; 0xe5uy; 0x9auy;
		0x51uy; 0xe6uy; 0x9buy; 0xfcuy; 0x63uy; 0xc9uy; 0x49uy; 0xbduy;
		0x6euy; 0x17uy; 0xf7uy; 0x0auy; 0x26uy; 0x66uy; 0x30uy; 0xacuy;
		0x4duy; 0x18uy; 0x3buy; 0xc0uy; 0x32uy; 0xf7uy; 0xafuy; 0xa3uy;
		0x2duy; 0xdauy; 0xd3uy; 0xd5uy; 0x17uy; 0x0duy; 0x0auy; 0x6cuy;
		0xb6uy; 0x72uy; 0xacuy; 0xbbuy; 0xfbuy; 0x9buy; 0x1fuy; 0x24uy;
		0x98uy; 0x19uy; 0x04uy; 0x30uy; 0x5cuy; 0x90uy; 0x7euy; 0x53uy;
		0x01uy; 0x60uy; 0x3fuy; 0x26uy; 0x87uy; 0x40uy; 0x2euy; 0x75uy;
		0xb3uy; 0xcbuy; 0x64uy; 0xe0uy; 0xa9uy; 0x27uy; 0xc0uy; 0x28uy;
		0xb6uy; 0x7euy; 0x67uy; 0x11uy; 0xdeuy; 0x7cuy; 0x88uy; 0xafuy;
		0xa2uy; 0x9cuy; 0x66uy; 0xf8uy; 0xbeuy; 0x82uy; 0x9auy; 0xf7uy;
		0xc3uy; 0x83uy; 0xb2uy; 0x76uy; 0x92uy; 0xc0uy; 0xe3uy; 0x87uy;
		0x23uy; 0xd1uy; 0x3cuy; 0xb5uy; 0x33uy; 0x6auy; 0x04uy; 0xcbuy;
		0xb2uy; 0xfeuy; 0x02uy; 0x8duy; 0xe6uy; 0x4cuy; 0x99uy; 0xdcuy;
		0xcfuy; 0x54uy; 0x15uy; 0x97uy; 0x3auy; 0xb1uy; 0x18uy; 0xbeuy;
		0x24uy; 0x91uy; 0x32uy; 0xf9uy; 0x90uy; 0xd6uy; 0x4fuy; 0x7euy;
		0x84uy; 0xb5uy; 0xfbuy; 0x84uy; 0x94uy; 0x67uy; 0xd1uy; 0xaauy;
		0xaauy; 0xe3uy; 0x7cuy; 0xc7uy; 0xdbuy; 0x01uy; 0x3euy; 0x95uy;
		0xeduy; 0x84uy; 0x53uy; 0x27uy; 0x3cuy; 0x46uy; 0x76uy; 0x22uy;
		0x70uy; 
	] in
  assert_norm(List.Tot.length l == 370);
  normalize_term l


inline_for_extraction noextract
let tv1_message_3: l:list uint8 {List.Tot.length l == 373}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x59uy;
		0x01uy; 0x72uy; 0x0duy; 0x88uy; 0x60uy; 0xa9uy; 0x45uy; 0x42uy;
		0x4euy; 0x80uy; 0x4euy; 0xc9uy; 0xe5uy; 0xb7uy; 0x3buy; 0xfcuy;
		0xcauy; 0x34uy; 0x8auy; 0xbeuy; 0xd8uy; 0xaeuy; 0xc6uy; 0x46uy;
		0x40uy; 0x3buy; 0x54uy; 0x78uy; 0xbbuy; 0x4duy; 0x2euy; 0xb7uy;
		0xd1uy; 0x04uy; 0xdauy; 0xabuy; 0xa1uy; 0x1euy; 0x5auy; 0x16uy;
		0xa3uy; 0x86uy; 0x34uy; 0x5cuy; 0xf2uy; 0xdeuy; 0x5duy; 0x16uy;
		0x01uy; 0x43uy; 0xc4uy; 0xa1uy; 0x1auy; 0x17uy; 0xa2uy; 0xb3uy;
		0x38uy; 0x6duy; 0x63uy; 0x28uy; 0xf5uy; 0x0duy; 0x02uy; 0xe8uy;
		0x2buy; 0x9auy; 0x19uy; 0xfcuy; 0x96uy; 0x60uy; 0xe4uy; 0x7cuy;
		0xd6uy; 0xcfuy; 0x3duy; 0x98uy; 0x6duy; 0xa1uy; 0xbbuy; 0x69uy;
		0xfeuy; 0x9auy; 0x12uy; 0x19uy; 0x3buy; 0x7fuy; 0x21uy; 0x6duy;
		0x31uy; 0x8duy; 0x7auy; 0x1cuy; 0xb2uy; 0x3cuy; 0xa2uy; 0x88uy;
		0x34uy; 0x75uy; 0x7buy; 0xa9uy; 0xd6uy; 0xdduy; 0x06uy; 0x45uy;
		0x9fuy; 0xbbuy; 0xf1uy; 0xf1uy; 0xb4uy; 0xd1uy; 0x92uy; 0x76uy;
		0xa9uy; 0xbfuy; 0xf8uy; 0x3auy; 0x0cuy; 0x7buy; 0x55uy; 0x52uy;
		0x2duy; 0xacuy; 0x00uy; 0x0fuy; 0x92uy; 0x59uy; 0x59uy; 0xf2uy;
		0x2cuy; 0xa1uy; 0x5cuy; 0xb0uy; 0xc5uy; 0x8buy; 0xacuy; 0x51uy;
		0x38uy; 0x2euy; 0xa8uy; 0x4cuy; 0x3cuy; 0xf9uy; 0x24uy; 0xcduy;
		0x73uy; 0x9buy; 0xdbuy; 0x07uy; 0x23uy; 0x9duy; 0x99uy; 0x4auy;
		0xf7uy; 0xfauy; 0xdbuy; 0x63uy; 0xe2uy; 0x5buy; 0xf9uy; 0x27uy;
		0xf2uy; 0xa7uy; 0x27uy; 0xe7uy; 0x30uy; 0xfbuy; 0xcfuy; 0x16uy;
		0xc3uy; 0xecuy; 0xe1uy; 0x0euy; 0x83uy; 0xebuy; 0x19uy; 0x82uy;
		0x1duy; 0x0cuy; 0x2auy; 0x2duy; 0xccuy; 0xdduy; 0xf4uy; 0xc1uy;
		0x5auy; 0x47uy; 0x55uy; 0x6fuy; 0x76uy; 0xb1uy; 0xb1uy; 0xf3uy;
		0x93uy; 0xfcuy; 0xa9uy; 0x28uy; 0x13uy; 0xa8uy; 0xaauy; 0x79uy;
		0xdfuy; 0x4fuy; 0x2euy; 0x26uy; 0xd6uy; 0x75uy; 0xc1uy; 0xe1uy;
		0x5cuy; 0x4duy; 0xc6uy; 0x0euy; 0xb3uy; 0xe4uy; 0xcbuy; 0x01uy;
		0xe5uy; 0x95uy; 0x22uy; 0xdauy; 0x10uy; 0xcfuy; 0x0euy; 0x43uy;
		0x9euy; 0xe5uy; 0x9auy; 0x51uy; 0xe6uy; 0x9buy; 0xfcuy; 0x63uy;
		0xc9uy; 0x49uy; 0xbduy; 0x6euy; 0x17uy; 0xf7uy; 0x0auy; 0x26uy;
		0x66uy; 0x30uy; 0xacuy; 0x4duy; 0x18uy; 0x3buy; 0xc0uy; 0x32uy;
		0xf7uy; 0xafuy; 0xa3uy; 0x2duy; 0xdauy; 0xd3uy; 0xd5uy; 0x17uy;
		0x0duy; 0x0auy; 0x6cuy; 0xb6uy; 0x72uy; 0xacuy; 0xbbuy; 0xfbuy;
		0x9buy; 0x1fuy; 0x24uy; 0x98uy; 0x19uy; 0x04uy; 0x30uy; 0x5cuy;
		0x90uy; 0x7euy; 0x53uy; 0x01uy; 0x60uy; 0x3fuy; 0x26uy; 0x87uy;
		0x40uy; 0x2euy; 0x75uy; 0xb3uy; 0xcbuy; 0x64uy; 0xe0uy; 0xa9uy;
		0x27uy; 0xc0uy; 0x28uy; 0xb6uy; 0x7euy; 0x67uy; 0x11uy; 0xdeuy;
		0x7cuy; 0x88uy; 0xafuy; 0xa2uy; 0x9cuy; 0x66uy; 0xf8uy; 0xbeuy;
		0x82uy; 0x9auy; 0xf7uy; 0xc3uy; 0x83uy; 0xb2uy; 0x76uy; 0x92uy;
		0xc0uy; 0xe3uy; 0x87uy; 0x23uy; 0xd1uy; 0x3cuy; 0xb5uy; 0x33uy;
		0x6auy; 0x04uy; 0xcbuy; 0xb2uy; 0xfeuy; 0x02uy; 0x8duy; 0xe6uy;
		0x4cuy; 0x99uy; 0xdcuy; 0xcfuy; 0x54uy; 0x15uy; 0x97uy; 0x3auy;
		0xb1uy; 0x18uy; 0xbeuy; 0x24uy; 0x91uy; 0x32uy; 0xf9uy; 0x90uy;
		0xd6uy; 0x4fuy; 0x7euy; 0x84uy; 0xb5uy; 0xfbuy; 0x84uy; 0x94uy;
		0x67uy; 0xd1uy; 0xaauy; 0xaauy; 0xe3uy; 0x7cuy; 0xc7uy; 0xdbuy;
		0x01uy; 0x3euy; 0x95uy; 0xeduy; 0x84uy; 0x53uy; 0x27uy; 0x3cuy;
		0x46uy; 0x76uy; 0x22uy; 0x70uy; 
	] in
  assert_norm(List.Tot.length l == 373);
  normalize_term l


inline_for_extraction noextract
let tv1_input_th_4: l:list uint8 {List.Tot.length l == 689}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x58uy;
		0x20uy; 0x7buy; 0x7duy; 0xa5uy; 0x33uy; 0xcfuy; 0x9auy; 0x6duy;
		0x0auy; 0x0euy; 0xbduy; 0x0buy; 0xd3uy; 0x0cuy; 0x8buy; 0x48uy;
		0xc4uy; 0x4duy; 0x12uy; 0x3duy; 0xd1uy; 0x39uy; 0xf0uy; 0x05uy;
		0x29uy; 0x8cuy; 0xf2uy; 0x7buy; 0x48uy; 0x7fuy; 0x78uy; 0x32uy;
		0x2fuy; 0xa1uy; 0x18uy; 0x21uy; 0x59uy; 0x01uy; 0x22uy; 0x30uy;
		0x82uy; 0x01uy; 0x1euy; 0x30uy; 0x81uy; 0xc5uy; 0xa0uy; 0x03uy;
		0x02uy; 0x01uy; 0x02uy; 0x02uy; 0x04uy; 0x62uy; 0x32uy; 0xefuy;
		0x6fuy; 0x30uy; 0x0auy; 0x06uy; 0x08uy; 0x2auy; 0x86uy; 0x48uy;
		0xceuy; 0x3duy; 0x04uy; 0x03uy; 0x02uy; 0x30uy; 0x15uy; 0x31uy;
		0x13uy; 0x30uy; 0x11uy; 0x06uy; 0x03uy; 0x55uy; 0x04uy; 0x03uy;
		0x0cuy; 0x0auy; 0x45uy; 0x44uy; 0x48uy; 0x4fuy; 0x43uy; 0x20uy;
		0x52uy; 0x6fuy; 0x6fuy; 0x74uy; 0x30uy; 0x1euy; 0x17uy; 0x0duy;
		0x32uy; 0x32uy; 0x30uy; 0x33uy; 0x31uy; 0x37uy; 0x30uy; 0x38uy;
		0x32uy; 0x31uy; 0x30uy; 0x33uy; 0x5auy; 0x17uy; 0x0duy; 0x32uy;
		0x39uy; 0x31uy; 0x32uy; 0x33uy; 0x31uy; 0x32uy; 0x33uy; 0x30uy;
		0x30uy; 0x30uy; 0x30uy; 0x5auy; 0x30uy; 0x1auy; 0x31uy; 0x18uy;
		0x30uy; 0x16uy; 0x06uy; 0x03uy; 0x55uy; 0x04uy; 0x03uy; 0x0cuy;
		0x0fuy; 0x45uy; 0x44uy; 0x48uy; 0x4fuy; 0x43uy; 0x20uy; 0x49uy;
		0x6euy; 0x69uy; 0x74uy; 0x69uy; 0x61uy; 0x74uy; 0x6fuy; 0x72uy;
		0x30uy; 0x59uy; 0x30uy; 0x13uy; 0x06uy; 0x07uy; 0x2auy; 0x86uy;
		0x48uy; 0xceuy; 0x3duy; 0x02uy; 0x01uy; 0x06uy; 0x08uy; 0x2auy;
		0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x03uy; 0x01uy; 0x07uy; 0x03uy;
		0x42uy; 0x00uy; 0x04uy; 0xacuy; 0x75uy; 0xe9uy; 0xecuy; 0xe3uy;
		0xe5uy; 0x0buy; 0xfcuy; 0x8euy; 0xd6uy; 0x03uy; 0x99uy; 0x88uy;
		0x95uy; 0x22uy; 0x40uy; 0x5cuy; 0x47uy; 0xbfuy; 0x16uy; 0xdfuy;
		0x96uy; 0x66uy; 0x0auy; 0x41uy; 0x29uy; 0x8cuy; 0xb4uy; 0x30uy;
		0x7fuy; 0x7euy; 0xb6uy; 0x6euy; 0x5duy; 0xe6uy; 0x11uy; 0x38uy;
		0x8auy; 0x4buy; 0x8auy; 0x82uy; 0x11uy; 0x33uy; 0x4auy; 0xc7uy;
		0xd3uy; 0x7euy; 0xcbuy; 0x52uy; 0xa3uy; 0x87uy; 0xd2uy; 0x57uy;
		0xe6uy; 0xdbuy; 0x3cuy; 0x2auy; 0x93uy; 0xdfuy; 0x21uy; 0xffuy;
		0x3auy; 0xffuy; 0xc8uy; 0x30uy; 0x0auy; 0x06uy; 0x08uy; 0x2auy;
		0x86uy; 0x48uy; 0xceuy; 0x3duy; 0x04uy; 0x03uy; 0x02uy; 0x03uy;
		0x48uy; 0x00uy; 0x30uy; 0x45uy; 0x02uy; 0x21uy; 0x00uy; 0x8cuy;
		0x32uy; 0x3auy; 0x1fuy; 0x33uy; 0x21uy; 0x38uy; 0xaauy; 0xb9uy;
		0xd0uy; 0xbeuy; 0xafuy; 0xb8uy; 0x5fuy; 0x8duy; 0x5auy; 0x44uy;
		0x07uy; 0x3cuy; 0x58uy; 0x0fuy; 0x59uy; 0x5buy; 0xc5uy; 0x21uy;
		0xefuy; 0x91uy; 0x3fuy; 0x6euy; 0xf4uy; 0x8duy; 0x11uy; 0x02uy;
		0x20uy; 0x6cuy; 0x0auy; 0xf1uy; 0xa1uy; 0x85uy; 0xa4uy; 0xe4uy;
		0xdeuy; 0x06uy; 0x35uy; 0x36uy; 0x99uy; 0x23uy; 0x1cuy; 0x73uy;
		0x3auy; 0x6euy; 0x8duy; 0xd2uy; 0xdfuy; 0x65uy; 0x13uy; 0x96uy;
		0x6cuy; 0x91uy; 0x30uy; 0x15uy; 0x2auy; 0x07uy; 0xa2uy; 0xbeuy;
		0xdeuy; 0x58uy; 0x40uy; 0xa5uy; 0x1euy; 0x90uy; 0x22uy; 0x19uy;
		0x76uy; 0x4duy; 0xb3uy; 0xe2uy; 0xb5uy; 0xb1uy; 0xb1uy; 0xf8uy;
		0x84uy; 0xb0uy; 0x4duy; 0xb5uy; 0xdbuy; 0x1duy; 0x63uy; 0x11uy;
		0x72uy; 0x13uy; 0x6fuy; 0x4buy; 0x0fuy; 0xf1uy; 0x92uy; 0x7fuy;
		0xa4uy; 0xf3uy; 0x81uy; 0x05uy; 0x1cuy; 0xecuy; 0xafuy; 0x0euy;
		0x11uy; 0xb7uy; 0x17uy; 0xa9uy; 0xc5uy; 0x4fuy; 0xf4uy; 0xd7uy;
		0x40uy; 0x32uy; 0xe0uy; 0xb7uy; 0xabuy; 0xeduy; 0x45uy; 0x9fuy;
		0xe5uy; 0x78uy; 0xe8uy; 0xe6uy; 0x8euy; 0x97uy; 0x70uy; 0x2auy;
		0x11uy; 0x62uy; 0xdbuy; 0x59uy; 0x01uy; 0x22uy; 0x30uy; 0x82uy;
		0x01uy; 0x1euy; 0x30uy; 0x81uy; 0xc5uy; 0xa0uy; 0x03uy; 0x02uy;
		0x01uy; 0x02uy; 0x02uy; 0x04uy; 0x62uy; 0x32uy; 0xefuy; 0x6fuy;
		0x30uy; 0x0auy; 0x06uy; 0x08uy; 0x2auy; 0x86uy; 0x48uy; 0xceuy;
		0x3duy; 0x04uy; 0x03uy; 0x02uy; 0x30uy; 0x15uy; 0x31uy; 0x13uy;
		0x30uy; 0x11uy; 0x06uy; 0x03uy; 0x55uy; 0x04uy; 0x03uy; 0x0cuy;
		0x0auy; 0x45uy; 0x44uy; 0x48uy; 0x4fuy; 0x43uy; 0x20uy; 0x52uy;
		0x6fuy; 0x6fuy; 0x74uy; 0x30uy; 0x1euy; 0x17uy; 0x0duy; 0x32uy;
		0x32uy; 0x30uy; 0x33uy; 0x31uy; 0x37uy; 0x30uy; 0x38uy; 0x32uy;
		0x31uy; 0x30uy; 0x33uy; 0x5auy; 0x17uy; 0x0duy; 0x32uy; 0x39uy;
		0x31uy; 0x32uy; 0x33uy; 0x31uy; 0x32uy; 0x33uy; 0x30uy; 0x30uy;
		0x30uy; 0x30uy; 0x5auy; 0x30uy; 0x1auy; 0x31uy; 0x18uy; 0x30uy;
		0x16uy; 0x06uy; 0x03uy; 0x55uy; 0x04uy; 0x03uy; 0x0cuy; 0x0fuy;
		0x45uy; 0x44uy; 0x48uy; 0x4fuy; 0x43uy; 0x20uy; 0x49uy; 0x6euy;
		0x69uy; 0x74uy; 0x69uy; 0x61uy; 0x74uy; 0x6fuy; 0x72uy; 0x30uy;
		0x59uy; 0x30uy; 0x13uy; 0x06uy; 0x07uy; 0x2auy; 0x86uy; 0x48uy;
		0xceuy; 0x3duy; 0x02uy; 0x01uy; 0x06uy; 0x08uy; 0x2auy; 0x86uy;
		0x48uy; 0xceuy; 0x3duy; 0x03uy; 0x01uy; 0x07uy; 0x03uy; 0x42uy;
		0x00uy; 0x04uy; 0xacuy; 0x75uy; 0xe9uy; 0xecuy; 0xe3uy; 0xe5uy;
		0x0buy; 0xfcuy; 0x8euy; 0xd6uy; 0x03uy; 0x99uy; 0x88uy; 0x95uy;
		0x22uy; 0x40uy; 0x5cuy; 0x47uy; 0xbfuy; 0x16uy; 0xdfuy; 0x96uy;
		0x66uy; 0x0auy; 0x41uy; 0x29uy; 0x8cuy; 0xb4uy; 0x30uy; 0x7fuy;
		0x7euy; 0xb6uy; 0x6euy; 0x5duy; 0xe6uy; 0x11uy; 0x38uy; 0x8auy;
		0x4buy; 0x8auy; 0x82uy; 0x11uy; 0x33uy; 0x4auy; 0xc7uy; 0xd3uy;
		0x7euy; 0xcbuy; 0x52uy; 0xa3uy; 0x87uy; 0xd2uy; 0x57uy; 0xe6uy;
		0xdbuy; 0x3cuy; 0x2auy; 0x93uy; 0xdfuy; 0x21uy; 0xffuy; 0x3auy;
		0xffuy; 0xc8uy; 0x30uy; 0x0auy; 0x06uy; 0x08uy; 0x2auy; 0x86uy;
		0x48uy; 0xceuy; 0x3duy; 0x04uy; 0x03uy; 0x02uy; 0x03uy; 0x48uy;
		0x00uy; 0x30uy; 0x45uy; 0x02uy; 0x21uy; 0x00uy; 0x8cuy; 0x32uy;
		0x3auy; 0x1fuy; 0x33uy; 0x21uy; 0x38uy; 0xaauy; 0xb9uy; 0xd0uy;
		0xbeuy; 0xafuy; 0xb8uy; 0x5fuy; 0x8duy; 0x5auy; 0x44uy; 0x07uy;
		0x3cuy; 0x58uy; 0x0fuy; 0x59uy; 0x5buy; 0xc5uy; 0x21uy; 0xefuy;
		0x91uy; 0x3fuy; 0x6euy; 0xf4uy; 0x8duy; 0x11uy; 0x02uy; 0x20uy;
		0x6cuy; 0x0auy; 0xf1uy; 0xa1uy; 0x85uy; 0xa4uy; 0xe4uy; 0xdeuy;
		0x06uy; 0x35uy; 0x36uy; 0x99uy; 0x23uy; 0x1cuy; 0x73uy; 0x3auy;
		0x6euy; 0x8duy; 0xd2uy; 0xdfuy; 0x65uy; 0x13uy; 0x96uy; 0x6cuy;
		0x91uy; 0x30uy; 0x15uy; 0x2auy; 0x07uy; 0xa2uy; 0xbeuy; 0xdeuy;
		
	] in
  assert_norm(List.Tot.length l == 689);
  normalize_term l


inline_for_extraction noextract
let tv1_th_4_raw: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x25uy;
		0x54uy; 0x2fuy; 0x9cuy; 0xa5uy; 0x81uy; 0x77uy; 0x1fuy; 0x1duy;
		0xc5uy; 0x12uy; 0xd4uy; 0xe1uy; 0x95uy; 0xc4uy; 0x66uy; 0x5auy;
		0x27uy; 0x12uy; 0x91uy; 0x18uy; 0x2duy; 0xdfuy; 0x49uy; 0x47uy;
		0xffuy; 0x69uy; 0x15uy; 0xa8uy; 0x61uy; 0x4cuy; 0x7cuy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_k_4_raw: l:list uint8 {List.Tot.length l == 16}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x9cuy;
		0x8euy; 0xa2uy; 0xceuy; 0xa2uy; 0x93uy; 0x55uy; 0x73uy; 0x71uy;
		0xd2uy; 0x2duy; 0x37uy; 0xaauy; 0x20uy; 0x70uy; 0x98uy; 
	] in
  assert_norm(List.Tot.length l == 16);
  normalize_term l


inline_for_extraction noextract
let tv1_info_iv_4: l:list uint8 {List.Tot.length l == 36}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x09uy;
		0x58uy; 0x20uy; 0x25uy; 0x54uy; 0x2fuy; 0x9cuy; 0xa5uy; 0x81uy;
		0x77uy; 0x1fuy; 0x1duy; 0xc5uy; 0x12uy; 0xd4uy; 0xe1uy; 0x95uy;
		0xc4uy; 0x66uy; 0x5auy; 0x27uy; 0x12uy; 0x91uy; 0x18uy; 0x2duy;
		0xdfuy; 0x49uy; 0x47uy; 0xffuy; 0x69uy; 0x15uy; 0xa8uy; 0x61uy;
		0x4cuy; 0x7cuy; 0x0duy; 
	] in
  assert_norm(List.Tot.length l == 36);
  normalize_term l


inline_for_extraction noextract
let tv1_iv_4_raw: l:list uint8 {List.Tot.length l == 13}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x37uy;
		0x3euy; 0x5cuy; 0x16uy; 0x3euy; 0x4cuy; 0x39uy; 0x7fuy; 0x77uy;
		0xd8uy; 0x8fuy; 0xe0uy; 0xe7uy; 
	] in
  assert_norm(List.Tot.length l == 13);
  normalize_term l


inline_for_extraction noextract
let tv1_ciphertext_4_raw: l:list uint8 {List.Tot.length l == 8}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x84uy;
		0xb8uy; 0x2fuy; 0x78uy; 0x09uy; 0x72uy; 0xd8uy; 0x2euy; 
	] in
  assert_norm(List.Tot.length l == 8);
  normalize_term l


inline_for_extraction noextract
let tv1_message_4: l:list uint8 {List.Tot.length l == 9}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x48uy;
		0x84uy; 0xb8uy; 0x2fuy; 0x78uy; 0x09uy; 0x72uy; 0xd8uy; 0x2euy;
		
	] in
  assert_norm(List.Tot.length l == 9);
  normalize_term l


inline_for_extraction noextract
let tv1_prk_out: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0xf8uy;
		0x76uy; 0x74uy; 0x4buy; 0x44uy; 0x64uy; 0xeduy; 0x78uy; 0x6fuy;
		0xe9uy; 0xe6uy; 0x89uy; 0xe4uy; 0xf5uy; 0xbduy; 0x3duy; 0xa6uy;
		0xc2uy; 0xeduy; 0xcfuy; 0x65uy; 0xe8uy; 0xe0uy; 0x3cuy; 0x0cuy;
		0xbbuy; 0x06uy; 0xe9uy; 0xbfuy; 0x2duy; 0xbduy; 0x0duy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


inline_for_extraction noextract
let tv1_prk_exporter: l:list uint8 {List.Tot.length l == 32}
  = [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
		0x62uy;
		0x59uy; 0x46uy; 0x35uy; 0x59uy; 0x20uy; 0xb9uy; 0xb9uy; 0xf4uy;
		0x6fuy; 0x77uy; 0x1euy; 0x09uy; 0xd9uy; 0x2duy; 0x38uy; 0xe9uy;
		0x9duy; 0x60uy; 0x79uy; 0x0duy; 0xb3uy; 0xf4uy; 0x69uy; 0xd0uy;
		0x80uy; 0x21uy; 0x44uy; 0x41uy; 0xe9uy; 0xd7uy; 0x8buy; 
	] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l


(*-------------------------------------------*)
(*---------------------- END Test vector 1*)

// inline_for_extraction noextract
// let t1_g_x: l:list uint8 {List.Tot.length l == 32}
//   = [@inline_let]
// 	let l = List.Tot.Base.map u8_from_UInt8 [
//     0x8Auy 0xF6uy 0xF4uy 0x30uy 0xEBuy E1 8D 34 18 40 17 A9 A1 1B F5 11 
// 	  C8 DF F8 F8 34 73 0B 96 C1 B7 C8 DB CA 2F C3 B6 
// 	] in


(*------------------------------ Set up*)

/// Set up party state with randomly generated credenitals,
/// authentication keys
val set_up_random_party_states:
  cs:supported_cipherSuite
  -> eresult (party_state #cs & party_state #cs)

val lemma_set_up_random_party_states_equiv:
  cs:supported_cipherSuite
  -> Lemma (ensures (
    match (set_up_random_party_states cs) with
      | Fail _ -> true
      | Res (is, rs) -> (
        is.remote_id_cred == rs.id_cred
        /\ rs.remote_id_cred == is.id_cred
        
        /\ is.remote_static_pub_key == rs.static_dh.pub
        /\ rs.remote_static_pub_key == is.static_dh.pub

        /\ is.remote_signature_pub_key == rs.signature_key.pub
        /\ rs.remote_signature_pub_key == is.signature_key.pub
      )
  ))
  [SMTPat (set_up_random_party_states cs)]
