module Spec.HKDF.Test

open FStar.Mul
open Lib.IntTypes
open Lib.RawIntTypes
open Lib.Sequence
open Lib.ByteSequence

module PS = Lib.PrintSequence
module HMAC = Spec.Agile.HMAC
module HKDF = Spec.Agile.HKDF

#set-options "--z3rlimit 50 --fuel 0 --ifuel 0"

///  Test 1

let test1_hash = Spec.Hash.Definitions.SHA2_256

let test1_ikm : lbytes 22 =
  let l = List.Tot.map u8_from_UInt8 [
    0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy;
    0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy;
    0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy
  ] in
  assert_norm (List.Tot.length l == 22);
  of_list l


let test1_salt : lbytes 13 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0auy; 0x0buy; 0x0cuy
  ] in
  assert_norm (List.Tot.length l == 13);
  of_list l


let test1_info : lbytes 10 =
  let l = List.Tot.map u8_from_UInt8 [
    0xf0uy; 0xf1uy; 0xf2uy; 0xf3uy; 0xf4uy; 0xf5uy; 0xf6uy; 0xf7uy;
    0xf8uy; 0xf9uy
  ] in
  assert_norm (List.Tot.length l == 10);
  of_list l

let test1_len = 42

let test1_expected_prk : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x07uy; 0x77uy; 0x09uy; 0x36uy; 0x2cuy; 0x2euy; 0x32uy; 0xdfuy;
    0x0duy; 0xdcuy; 0x3fuy; 0x0duy; 0xc4uy; 0x7buy; 0xbauy; 0x63uy;
    0x90uy; 0xb6uy; 0xc7uy; 0x3buy; 0xb5uy; 0x0fuy; 0x9cuy; 0x31uy;
    0x22uy; 0xecuy; 0x84uy; 0x4auy; 0xd7uy; 0xc2uy; 0xb3uy; 0xe5uy
  ] in
  assert_norm (List.Tot.length l == 32);
  of_list l


let test1_expected_okm : lbytes 42 =
  let l = List.Tot.map u8_from_UInt8 [
    0x3cuy; 0xb2uy; 0x5fuy; 0x25uy; 0xfauy; 0xacuy; 0xd5uy; 0x7auy;
    0x90uy; 0x43uy; 0x4fuy; 0x64uy; 0xd0uy; 0x36uy; 0x2fuy; 0x2auy;
    0x2duy; 0x2duy; 0x0auy; 0x90uy; 0xcfuy; 0x1auy; 0x5auy; 0x4cuy;
    0x5duy; 0xb0uy; 0x2duy; 0x56uy; 0xecuy; 0xc4uy; 0xc5uy; 0xbfuy;
    0x34uy; 0x00uy; 0x72uy; 0x08uy; 0xd5uy; 0xb8uy; 0x87uy; 0x18uy;
    0x58uy; 0x65uy
  ] in
  assert_norm (List.Tot.length l == 42);
  of_list l


///  Test 2

let test2_hash = Spec.Hash.Definitions.SHA2_256

let test2_ikm : lbytes 80 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0auy; 0x0buy; 0x0cuy; 0x0duy; 0x0euy; 0x0fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1auy; 0x1buy; 0x1cuy; 0x1duy; 0x1euy; 0x1fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2auy; 0x2buy; 0x2cuy; 0x2duy; 0x2euy; 0x2fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3auy; 0x3buy; 0x3cuy; 0x3duy; 0x3euy; 0x3fuy;
    0x40uy; 0x41uy; 0x42uy; 0x43uy; 0x44uy; 0x45uy; 0x46uy; 0x47uy;
    0x48uy; 0x49uy; 0x4auy; 0x4buy; 0x4cuy; 0x4duy; 0x4euy; 0x4fuy
  ] in
  assert_norm (List.Tot.length l == 80);
  of_list l


let test2_salt : lbytes 80 =
  let l = List.Tot.map u8_from_UInt8 [
    0x60uy; 0x61uy; 0x62uy; 0x63uy; 0x64uy; 0x65uy; 0x66uy; 0x67uy;
    0x68uy; 0x69uy; 0x6auy; 0x6buy; 0x6cuy; 0x6duy; 0x6euy; 0x6fuy;
    0x70uy; 0x71uy; 0x72uy; 0x73uy; 0x74uy; 0x75uy; 0x76uy; 0x77uy;
    0x78uy; 0x79uy; 0x7auy; 0x7buy; 0x7cuy; 0x7duy; 0x7euy; 0x7fuy;
    0x80uy; 0x81uy; 0x82uy; 0x83uy; 0x84uy; 0x85uy; 0x86uy; 0x87uy;
    0x88uy; 0x89uy; 0x8auy; 0x8buy; 0x8cuy; 0x8duy; 0x8euy; 0x8fuy;
    0x90uy; 0x91uy; 0x92uy; 0x93uy; 0x94uy; 0x95uy; 0x96uy; 0x97uy;
    0x98uy; 0x99uy; 0x9auy; 0x9buy; 0x9cuy; 0x9duy; 0x9euy; 0x9fuy;
    0xa0uy; 0xa1uy; 0xa2uy; 0xa3uy; 0xa4uy; 0xa5uy; 0xa6uy; 0xa7uy;
    0xa8uy; 0xa9uy; 0xaauy; 0xabuy; 0xacuy; 0xaduy; 0xaeuy; 0xafuy
  ] in
  assert_norm (List.Tot.length l == 80);
  of_list l


let test2_info : lbytes 80 =
  let l = List.Tot.map u8_from_UInt8 [
    0xb0uy; 0xb1uy; 0xb2uy; 0xb3uy; 0xb4uy; 0xb5uy; 0xb6uy; 0xb7uy;
    0xb8uy; 0xb9uy; 0xbauy; 0xbbuy; 0xbcuy; 0xbduy; 0xbeuy; 0xbfuy;
    0xc0uy; 0xc1uy; 0xc2uy; 0xc3uy; 0xc4uy; 0xc5uy; 0xc6uy; 0xc7uy;
    0xc8uy; 0xc9uy; 0xcauy; 0xcbuy; 0xccuy; 0xcduy; 0xceuy; 0xcfuy;
    0xd0uy; 0xd1uy; 0xd2uy; 0xd3uy; 0xd4uy; 0xd5uy; 0xd6uy; 0xd7uy;
    0xd8uy; 0xd9uy; 0xdauy; 0xdbuy; 0xdcuy; 0xdduy; 0xdeuy; 0xdfuy;
    0xe0uy; 0xe1uy; 0xe2uy; 0xe3uy; 0xe4uy; 0xe5uy; 0xe6uy; 0xe7uy;
    0xe8uy; 0xe9uy; 0xeauy; 0xebuy; 0xecuy; 0xeduy; 0xeeuy; 0xefuy;
    0xf0uy; 0xf1uy; 0xf2uy; 0xf3uy; 0xf4uy; 0xf5uy; 0xf6uy; 0xf7uy;
    0xf8uy; 0xf9uy; 0xfauy; 0xfbuy; 0xfcuy; 0xfduy; 0xfeuy; 0xffuy
  ] in
  assert_norm (List.Tot.length l == 80);
  of_list l

let test2_len = 82

let test2_expected_prk : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x06uy; 0xa6uy; 0xb8uy; 0x8cuy; 0x58uy; 0x53uy; 0x36uy; 0x1auy;
    0x06uy; 0x10uy; 0x4cuy; 0x9cuy; 0xebuy; 0x35uy; 0xb4uy; 0x5cuy;
    0xefuy; 0x76uy; 0x00uy; 0x14uy; 0x90uy; 0x46uy; 0x71uy; 0x01uy;
    0x4auy; 0x19uy; 0x3fuy; 0x40uy; 0xc1uy; 0x5fuy; 0xc2uy; 0x44uy
  ] in
  assert_norm (List.Tot.length l == 32);
  of_list l


let test2_expected_okm : lbytes 82 =
  let l = List.Tot.map u8_from_UInt8 [
    0xb1uy; 0x1euy; 0x39uy; 0x8duy; 0xc8uy; 0x03uy; 0x27uy; 0xa1uy;
    0xc8uy; 0xe7uy; 0xf7uy; 0x8cuy; 0x59uy; 0x6auy; 0x49uy; 0x34uy;
    0x4fuy; 0x01uy; 0x2euy; 0xdauy; 0x2duy; 0x4euy; 0xfauy; 0xd8uy;
    0xa0uy; 0x50uy; 0xccuy; 0x4cuy; 0x19uy; 0xafuy; 0xa9uy; 0x7cuy;
    0x59uy; 0x04uy; 0x5auy; 0x99uy; 0xcauy; 0xc7uy; 0x82uy; 0x72uy;
    0x71uy; 0xcbuy; 0x41uy; 0xc6uy; 0x5euy; 0x59uy; 0x0euy; 0x09uy;
    0xdauy; 0x32uy; 0x75uy; 0x60uy; 0x0cuy; 0x2fuy; 0x09uy; 0xb8uy;
    0x36uy; 0x77uy; 0x93uy; 0xa9uy; 0xacuy; 0xa3uy; 0xdbuy; 0x71uy;
    0xccuy; 0x30uy; 0xc5uy; 0x81uy; 0x79uy; 0xecuy; 0x3euy; 0x87uy;
    0xc1uy; 0x4cuy; 0x01uy; 0xd5uy; 0xc1uy; 0xf3uy; 0x43uy; 0x4fuy;
    0x1duy; 0x87uy
  ] in
  assert_norm (List.Tot.length l == 82);
  of_list l


///  Test 3

let test3_hash = Spec.Hash.Definitions.SHA2_256

let test3_ikm : lbytes 22 =
  let l = List.Tot.map u8_from_UInt8 [
    0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy;
    0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy;
    0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy
  ] in
  assert_norm (List.Tot.length l == 22);
  of_list l


let test3_salt : lbytes 0 =
  let l = List.Tot.map u8_from_UInt8 [] in
  assert_norm (List.Tot.length l == 0);
  of_list l


let test3_info : lbytes 0 =
  let l = List.Tot.map u8_from_UInt8 [] in
  assert_norm (List.Tot.length l == 0);
  of_list l

let test3_len = 42

let test3_expected_prk : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x19uy; 0xefuy; 0x24uy; 0xa3uy; 0x2cuy; 0x71uy; 0x7buy; 0x16uy;
    0x7fuy; 0x33uy; 0xa9uy; 0x1duy; 0x6fuy; 0x64uy; 0x8buy; 0xdfuy;
    0x96uy; 0x59uy; 0x67uy; 0x76uy; 0xafuy; 0xdbuy; 0x63uy; 0x77uy;
    0xacuy; 0x43uy; 0x4cuy; 0x1cuy; 0x29uy; 0x3cuy; 0xcbuy; 0x04uy
  ] in
  assert_norm (List.Tot.length l == 32);
  of_list l


let test3_expected_okm : lbytes 42 =
  let l = List.Tot.map u8_from_UInt8 [
    0x8duy; 0xa4uy; 0xe7uy; 0x75uy; 0xa5uy; 0x63uy; 0xc1uy; 0x8fuy;
    0x71uy; 0x5fuy; 0x80uy; 0x2auy; 0x06uy; 0x3cuy; 0x5auy; 0x31uy;
    0xb8uy; 0xa1uy; 0x1fuy; 0x5cuy; 0x5euy; 0xe1uy; 0x87uy; 0x9euy;
    0xc3uy; 0x45uy; 0x4euy; 0x5fuy; 0x3cuy; 0x73uy; 0x8duy; 0x2duy;
    0x9duy; 0x20uy; 0x13uy; 0x95uy; 0xfauy; 0xa4uy; 0xb6uy; 0x1auy;
    0x96uy; 0xc8uy
  ] in
  assert_norm (List.Tot.length l == 42);
  of_list l


noeq type vec =
  | Vec :
    a:Spec.Hash.Definitions.fixed_len_alg
  -> salt:bytes{HMAC.keysized a (length salt)}
  -> ikm:bytes{HKDF.extract_ikm_length_pred a (length ikm)}
  -> expected_prk:lbytes (Spec.Hash.Definitions.hash_length a)
  -> info:bytes{HKDF.expand_info_length_pred a (length info)}
  -> out_len:nat{HKDF.expand_output_length_pred a out_len}
  -> expected_okm:lbytes out_len -> vec


let _: squash (pow2 32 < pow2 61 /\ pow2 32 < pow2 125) =
  Math.Lemmas.pow2_lt_compat 61 32;
  Math.Lemmas.pow2_lt_compat 125 32


let test_vectors: list vec = [
  Vec test1_hash test1_salt test1_ikm
      test1_expected_prk test1_info test1_len test1_expected_okm;
  Vec test2_hash test2_salt test2_ikm
      test2_expected_prk test2_info test2_len test2_expected_okm;
  Vec test3_hash test3_salt test3_ikm
      test3_expected_prk test3_info test3_len test3_expected_okm ]


#set-options "--ifuel 2"

let test_one (v:vec) =
  let Vec a salt ikm expected_prk info out_len expected_okm = v in
  let test_prk = HKDF.extract a salt ikm in
  let test_okm = HKDF.expand a expected_prk info out_len in

  IO.print_string "\nPRK:";
  let r_a = PS.print_compare true (length expected_prk) expected_prk test_prk in
  IO.print_string "\nOKM:";
  let r_b = PS.print_compare true (length expected_okm) expected_okm test_okm in

  let res = r_a && r_b in
  if r_a then IO.print_string "\nHKDF Extract: Success!\n"
  else IO.print_string "\nHKDF Extract: Failure :(\n";
  if r_b then IO.print_string "HKDF Expand: Success!\n"
  else IO.print_string "HKDF Expand: Failure :(\n";
  res


let test () =
  let res = List.for_all test_one test_vectors in
  if res then begin IO.print_string "\n\nHKDF: Success!\n"; true end
  else begin IO.print_string "\n\nHKDF: Failure :(\n"; false end
