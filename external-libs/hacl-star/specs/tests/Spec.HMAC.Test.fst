module Spec.HMAC.Test

open FStar.Mul
open Lib.IntTypes
open Lib.RawIntTypes
open Lib.Sequence
open Lib.ByteSequence
module PS = Lib.PrintSequence

open Spec.Hash.Definitions
module HMAC = Spec.Agile.HMAC

#set-options "--z3rlimit 50 --fuel 0 --ifuel 0"

///  Test 1

let test1_key : lbytes 20 =
  let l = List.Tot.map u8_from_UInt8 [
    0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy;
    0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy; 0x0buy;
    0x0buy; 0x0buy; 0x0buy; 0x0buy
  ] in
  assert_norm (List.Tot.length l == 20);
  of_list l


let test1_data : lbytes 8 =
  let l = List.Tot.map u8_from_UInt8 [
    0x48uy; 0x69uy; 0x20uy; 0x54uy; 0x68uy; 0x65uy; 0x72uy; 0x65uy
  ] in
  assert_norm (List.Tot.length l == 8);
  of_list l


let test1_expected224 : lbytes 28 =
  let l = List.Tot.map u8_from_UInt8 [
    0x89uy; 0x6fuy; 0xb1uy; 0x12uy; 0x8auy; 0xbbuy; 0xdfuy; 0x19uy;
    0x68uy; 0x32uy; 0x10uy; 0x7cuy; 0xd4uy; 0x9duy; 0xf3uy; 0x3fuy;
    0x47uy; 0xb4uy; 0xb1uy; 0x16uy; 0x99uy; 0x12uy; 0xbauy; 0x4fuy;
    0x53uy; 0x68uy; 0x4buy; 0x22uy
  ] in
  assert_norm (List.Tot.length l == 28);
  of_list l


let test1_expected256 : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0xb0uy; 0x34uy; 0x4cuy; 0x61uy; 0xd8uy; 0xdbuy; 0x38uy; 0x53uy;
    0x5cuy; 0xa8uy; 0xafuy; 0xceuy; 0xafuy; 0x0buy; 0xf1uy; 0x2buy;
    0x88uy; 0x1duy; 0xc2uy; 0x00uy; 0xc9uy; 0x83uy; 0x3duy; 0xa7uy;
    0x26uy; 0xe9uy; 0x37uy; 0x6cuy; 0x2euy; 0x32uy; 0xcfuy; 0xf7uy
  ] in
  assert_norm (List.Tot.length l == 32);
  of_list l


let test1_expected384 : lbytes 48 =
  let l = List.Tot.map u8_from_UInt8 [
    0xafuy; 0xd0uy; 0x39uy; 0x44uy; 0xd8uy; 0x48uy; 0x95uy; 0x62uy;
    0x6buy; 0x08uy; 0x25uy; 0xf4uy; 0xabuy; 0x46uy; 0x90uy; 0x7fuy;
    0x15uy; 0xf9uy; 0xdauy; 0xdbuy; 0xe4uy; 0x10uy; 0x1euy; 0xc6uy;
    0x82uy; 0xaauy; 0x03uy; 0x4cuy; 0x7cuy; 0xebuy; 0xc5uy; 0x9cuy;
    0xfauy; 0xeauy; 0x9euy; 0xa9uy; 0x07uy; 0x6euy; 0xdeuy; 0x7fuy;
    0x4auy; 0xf1uy; 0x52uy; 0xe8uy; 0xb2uy; 0xfauy; 0x9cuy; 0xb6uy
  ] in
  assert_norm (List.Tot.length l == 48);
  of_list l


let test1_expected512 : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x87uy; 0xaauy; 0x7cuy; 0xdeuy; 0xa5uy; 0xefuy; 0x61uy; 0x9duy;
    0x4fuy; 0xf0uy; 0xb4uy; 0x24uy; 0x1auy; 0x1duy; 0x6cuy; 0xb0uy;
    0x23uy; 0x79uy; 0xf4uy; 0xe2uy; 0xceuy; 0x4euy; 0xc2uy; 0x78uy;
    0x7auy; 0xd0uy; 0xb3uy; 0x05uy; 0x45uy; 0xe1uy; 0x7cuy; 0xdeuy;
    0xdauy; 0xa8uy; 0x33uy; 0xb7uy; 0xd6uy; 0xb8uy; 0xa7uy; 0x02uy;
    0x03uy; 0x8buy; 0x27uy; 0x4euy; 0xaeuy; 0xa3uy; 0xf4uy; 0xe4uy;
    0xbeuy; 0x9duy; 0x91uy; 0x4euy; 0xebuy; 0x61uy; 0xf1uy; 0x70uy;
    0x2euy; 0x69uy; 0x6cuy; 0x20uy; 0x3auy; 0x12uy; 0x68uy; 0x54uy
  ] in
  assert_norm (List.Tot.length l == 64);
  of_list l


///  Test 2

let test2_key : lbytes 4 =
  let l = List.Tot.map u8_from_UInt8 [ 0x4auy; 0x65uy; 0x66uy; 0x65uy ] in
  assert_norm (List.Tot.length l == 4);
  of_list l


let test2_data : lbytes 28 =
  let l = List.Tot.map u8_from_UInt8 [
    0x77uy; 0x68uy; 0x61uy; 0x74uy; 0x20uy; 0x64uy; 0x6fuy; 0x20uy;
    0x79uy; 0x61uy; 0x20uy; 0x77uy; 0x61uy; 0x6euy; 0x74uy; 0x20uy;
    0x66uy; 0x6fuy; 0x72uy; 0x20uy; 0x6euy; 0x6fuy; 0x74uy; 0x68uy;
    0x69uy; 0x6euy; 0x67uy; 0x3fuy
  ] in
  assert_norm (List.Tot.length l == 28);
  of_list l


let test2_expected224 : lbytes 28 =
  let l = List.Tot.map u8_from_UInt8 [
    0xa3uy; 0x0euy; 0x01uy; 0x09uy; 0x8buy; 0xc6uy; 0xdbuy; 0xbfuy;
    0x45uy; 0x69uy; 0x0fuy; 0x3auy; 0x7euy; 0x9euy; 0x6duy; 0x0fuy;
    0x8buy; 0xbeuy; 0xa2uy; 0xa3uy; 0x9euy; 0x61uy; 0x48uy; 0x00uy;
    0x8fuy; 0xd0uy; 0x5euy; 0x44uy
  ] in
  assert_norm (List.Tot.length l == 28);
  of_list l


let test2_expected256 : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x5buy; 0xdcuy; 0xc1uy; 0x46uy; 0xbfuy; 0x60uy; 0x75uy; 0x4euy;
    0x6auy; 0x04uy; 0x24uy; 0x26uy; 0x08uy; 0x95uy; 0x75uy; 0xc7uy;
    0x5auy; 0x00uy; 0x3fuy; 0x08uy; 0x9duy; 0x27uy; 0x39uy; 0x83uy;
    0x9duy; 0xecuy; 0x58uy; 0xb9uy; 0x64uy; 0xecuy; 0x38uy; 0x43uy
  ] in
  assert_norm (List.Tot.length l == 32);
  of_list l


let test2_expected384 : lbytes 48 =
  let l = List.Tot.map u8_from_UInt8 [
    0xafuy; 0x45uy; 0xd2uy; 0xe3uy; 0x76uy; 0x48uy; 0x40uy; 0x31uy;
    0x61uy; 0x7fuy; 0x78uy; 0xd2uy; 0xb5uy; 0x8auy; 0x6buy; 0x1buy;
    0x9cuy; 0x7euy; 0xf4uy; 0x64uy; 0xf5uy; 0xa0uy; 0x1buy; 0x47uy;
    0xe4uy; 0x2euy; 0xc3uy; 0x73uy; 0x63uy; 0x22uy; 0x44uy; 0x5euy;
    0x8euy; 0x22uy; 0x40uy; 0xcauy; 0x5euy; 0x69uy; 0xe2uy; 0xc7uy;
    0x8buy; 0x32uy; 0x39uy; 0xecuy; 0xfauy; 0xb2uy; 0x16uy; 0x49uy
  ] in
  assert_norm (List.Tot.length l == 48);
  of_list l


let test2_expected512 : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x16uy; 0x4buy; 0x7auy; 0x7buy; 0xfcuy; 0xf8uy; 0x19uy; 0xe2uy;
    0xe3uy; 0x95uy; 0xfbuy; 0xe7uy; 0x3buy; 0x56uy; 0xe0uy; 0xa3uy;
    0x87uy; 0xbduy; 0x64uy; 0x22uy; 0x2euy; 0x83uy; 0x1fuy; 0xd6uy;
    0x10uy; 0x27uy; 0x0cuy; 0xd7uy; 0xeauy; 0x25uy; 0x05uy; 0x54uy;
    0x97uy; 0x58uy; 0xbfuy; 0x75uy; 0xc0uy; 0x5auy; 0x99uy; 0x4auy;
    0x6duy; 0x03uy; 0x4fuy; 0x65uy; 0xf8uy; 0xf0uy; 0xe6uy; 0xfduy;
    0xcauy; 0xeauy; 0xb1uy; 0xa3uy; 0x4duy; 0x4auy; 0x6buy; 0x4buy;
    0x63uy; 0x6euy; 0x07uy; 0x0auy; 0x38uy; 0xbcuy; 0xe7uy; 0x37uy
  ] in
  assert_norm (List.Tot.length l == 64);
  of_list l


///  Test 3

let test3_key : lbytes 20 =
  let l = List.Tot.map u8_from_UInt8 [
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy
  ] in
  assert_norm (List.Tot.length l == 20);
  of_list l


let test3_data : lbytes 50 =
  let l = List.Tot.map u8_from_UInt8 [
    0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy;
    0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy;
    0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy;
    0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy;
    0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy;
    0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy; 0xdduy;
    0xdduy; 0xdduy
  ] in
  assert_norm (List.Tot.length l == 50);
  of_list l


let test3_expected224 : lbytes 28 =
  let l = List.Tot.map u8_from_UInt8 [
    0x7fuy; 0xb3uy; 0xcbuy; 0x35uy; 0x88uy; 0xc6uy; 0xc1uy; 0xf6uy;
    0xffuy; 0xa9uy; 0x69uy; 0x4duy; 0x7duy; 0x6auy; 0xd2uy; 0x64uy;
    0x93uy; 0x65uy; 0xb0uy; 0xc1uy; 0xf6uy; 0x5duy; 0x69uy; 0xd1uy;
    0xecuy; 0x83uy; 0x33uy; 0xeauy
  ] in
  assert_norm (List.Tot.length l == 28);
  of_list l


let test3_expected256 : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x77uy; 0x3euy; 0xa9uy; 0x1euy; 0x36uy; 0x80uy; 0x0euy; 0x46uy;
    0x85uy; 0x4duy; 0xb8uy; 0xebuy; 0xd0uy; 0x91uy; 0x81uy; 0xa7uy;
    0x29uy; 0x59uy; 0x09uy; 0x8buy; 0x3euy; 0xf8uy; 0xc1uy; 0x22uy;
    0xd9uy; 0x63uy; 0x55uy; 0x14uy; 0xceuy; 0xd5uy; 0x65uy; 0xfeuy
  ] in
  assert_norm (List.Tot.length l == 32);
  of_list l


let test3_expected384 : lbytes 48 =
  let l = List.Tot.map u8_from_UInt8 [
    0x88uy; 0x06uy; 0x26uy; 0x08uy; 0xd3uy; 0xe6uy; 0xaduy; 0x8auy;
    0x0auy; 0xa2uy; 0xacuy; 0xe0uy; 0x14uy; 0xc8uy; 0xa8uy; 0x6fuy;
    0x0auy; 0xa6uy; 0x35uy; 0xd9uy; 0x47uy; 0xacuy; 0x9fuy; 0xebuy;
    0xe8uy; 0x3euy; 0xf4uy; 0xe5uy; 0x59uy; 0x66uy; 0x14uy; 0x4buy;
    0x2auy; 0x5auy; 0xb3uy; 0x9duy; 0xc1uy; 0x38uy; 0x14uy; 0xb9uy;
    0x4euy; 0x3auy; 0xb6uy; 0xe1uy; 0x01uy; 0xa3uy; 0x4fuy; 0x27uy
  ] in
  assert_norm (List.Tot.length l == 48);
  of_list l


let test3_expected512 : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0xfauy; 0x73uy; 0xb0uy; 0x08uy; 0x9duy; 0x56uy; 0xa2uy; 0x84uy;
    0xefuy; 0xb0uy; 0xf0uy; 0x75uy; 0x6cuy; 0x89uy; 0x0buy; 0xe9uy;
    0xb1uy; 0xb5uy; 0xdbuy; 0xdduy; 0x8euy; 0xe8uy; 0x1auy; 0x36uy;
    0x55uy; 0xf8uy; 0x3euy; 0x33uy; 0xb2uy; 0x27uy; 0x9duy; 0x39uy;
    0xbfuy; 0x3euy; 0x84uy; 0x82uy; 0x79uy; 0xa7uy; 0x22uy; 0xc8uy;
    0x06uy; 0xb4uy; 0x85uy; 0xa4uy; 0x7euy; 0x67uy; 0xc8uy; 0x07uy;
    0xb9uy; 0x46uy; 0xa3uy; 0x37uy; 0xbeuy; 0xe8uy; 0x94uy; 0x26uy;
    0x74uy; 0x27uy; 0x88uy; 0x59uy; 0xe1uy; 0x32uy; 0x92uy; 0xfbuy
  ] in
  assert_norm (List.Tot.length l == 64);
  of_list l


///  Test 4

let test4_key : lbytes 25 =
  let l = List.Tot.map u8_from_UInt8 [
    0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy; 0x08uy;
    0x09uy; 0x0auy; 0x0buy; 0x0cuy; 0x0duy; 0x0euy; 0x0fuy; 0x10uy;
    0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy; 0x18uy;
    0x19uy
  ] in
  assert_norm (List.Tot.length l == 25);
  of_list l


let test4_data : lbytes 50 =
  let l = List.Tot.map u8_from_UInt8 [
    0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy;
    0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy;
    0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy;
    0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy;
    0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy;
    0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy; 0xcduy;
    0xcduy; 0xcduy
  ] in
  assert_norm (List.Tot.length l == 50);
  of_list l


let test4_expected224 : lbytes 28 =
  let l = List.Tot.map u8_from_UInt8 [
    0x6cuy; 0x11uy; 0x50uy; 0x68uy; 0x74uy; 0x01uy; 0x3cuy; 0xacuy;
    0x6auy; 0x2auy; 0xbcuy; 0x1buy; 0xb3uy; 0x82uy; 0x62uy; 0x7cuy;
    0xecuy; 0x6auy; 0x90uy; 0xd8uy; 0x6euy; 0xfcuy; 0x01uy; 0x2duy;
    0xe7uy; 0xafuy; 0xecuy; 0x5auy
  ] in
  assert_norm (List.Tot.length l == 28);
  of_list l


let test4_expected256 : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x82uy; 0x55uy; 0x8auy; 0x38uy; 0x9auy; 0x44uy; 0x3cuy; 0x0euy;
    0xa4uy; 0xccuy; 0x81uy; 0x98uy; 0x99uy; 0xf2uy; 0x08uy; 0x3auy;
    0x85uy; 0xf0uy; 0xfauy; 0xa3uy; 0xe5uy; 0x78uy; 0xf8uy; 0x07uy;
    0x7auy; 0x2euy; 0x3fuy; 0xf4uy; 0x67uy; 0x29uy; 0x66uy; 0x5buy
  ] in
  assert_norm (List.Tot.length l == 32);
  of_list l


let test4_expected384 : lbytes 48 =
  let l = List.Tot.map u8_from_UInt8 [
    0x3euy; 0x8auy; 0x69uy; 0xb7uy; 0x78uy; 0x3cuy; 0x25uy; 0x85uy;
    0x19uy; 0x33uy; 0xabuy; 0x62uy; 0x90uy; 0xafuy; 0x6cuy; 0xa7uy;
    0x7auy; 0x99uy; 0x81uy; 0x48uy; 0x08uy; 0x50uy; 0x00uy; 0x9cuy;
    0xc5uy; 0x57uy; 0x7cuy; 0x6euy; 0x1fuy; 0x57uy; 0x3buy; 0x4euy;
    0x68uy; 0x01uy; 0xdduy; 0x23uy; 0xc4uy; 0xa7uy; 0xd6uy; 0x79uy;
    0xccuy; 0xf8uy; 0xa3uy; 0x86uy; 0xc6uy; 0x74uy; 0xcfuy; 0xfbuy
  ] in
  assert_norm (List.Tot.length l == 48);
  of_list l


let test4_expected512 : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0xb0uy; 0xbauy; 0x46uy; 0x56uy; 0x37uy; 0x45uy; 0x8cuy; 0x69uy;
    0x90uy; 0xe5uy; 0xa8uy; 0xc5uy; 0xf6uy; 0x1duy; 0x4auy; 0xf7uy;
    0xe5uy; 0x76uy; 0xd9uy; 0x7fuy; 0xf9uy; 0x4buy; 0x87uy; 0x2duy;
    0xe7uy; 0x6fuy; 0x80uy; 0x50uy; 0x36uy; 0x1euy; 0xe3uy; 0xdbuy;
    0xa9uy; 0x1cuy; 0xa5uy; 0xc1uy; 0x1auy; 0xa2uy; 0x5euy; 0xb4uy;
    0xd6uy; 0x79uy; 0x27uy; 0x5cuy; 0xc5uy; 0x78uy; 0x80uy; 0x63uy;
    0xa5uy; 0xf1uy; 0x97uy; 0x41uy; 0x12uy; 0x0cuy; 0x4fuy; 0x2duy;
    0xe2uy; 0xaduy; 0xebuy; 0xebuy; 0x10uy; 0xa2uy; 0x98uy; 0xdduy
  ] in
  assert_norm (List.Tot.length l == 64);
  of_list l


///  Test 5

let test5_key : lbytes 20 =
  let l = List.Tot.map u8_from_UInt8 [
    0x0cuy; 0x0cuy; 0x0cuy; 0x0cuy; 0x0cuy; 0x0cuy; 0x0cuy; 0x0cuy;
    0x0cuy; 0x0cuy; 0x0cuy; 0x0cuy; 0x0cuy; 0x0cuy; 0x0cuy; 0x0cuy;
    0x0cuy; 0x0cuy; 0x0cuy; 0x0cuy
  ] in
  assert_norm (List.Tot.length l == 20);
  of_list l


let test5_data : lbytes 20 =
  let l = List.Tot.map u8_from_UInt8 [
    0x54uy; 0x65uy; 0x73uy; 0x74uy; 0x20uy; 0x57uy; 0x69uy; 0x74uy;
    0x68uy; 0x20uy; 0x54uy; 0x72uy; 0x75uy; 0x6euy; 0x63uy; 0x61uy;
    0x74uy; 0x69uy; 0x6fuy; 0x6euy
  ] in
  assert_norm (List.Tot.length l == 20);
  of_list l


let test5_expected224 : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x0euy; 0x2auy; 0xeauy; 0x68uy; 0xa9uy; 0x0cuy; 0x8duy; 0x37uy;
    0xc9uy; 0x88uy; 0xbcuy; 0xdbuy; 0x9fuy; 0xcauy; 0x6fuy; 0xa8uy;
  ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test5_expected256 : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0xa3uy; 0xb6uy; 0x16uy; 0x74uy; 0x73uy; 0x10uy; 0x0euy; 0xe0uy;
    0x6euy; 0x0cuy; 0x79uy; 0x6cuy; 0x29uy; 0x55uy; 0x55uy; 0x2buy
  ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test5_expected384 : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x3auy; 0xbfuy; 0x34uy; 0xc3uy; 0x50uy; 0x3buy; 0x2auy; 0x23uy;
    0xa4uy; 0x6euy; 0xfcuy; 0x61uy; 0x9buy; 0xaeuy; 0xf8uy; 0x97uy
  ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test5_expected512 : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x41uy; 0x5fuy; 0xaduy; 0x62uy; 0x71uy; 0x58uy; 0x0auy; 0x53uy;
    0x1duy; 0x41uy; 0x79uy; 0xbcuy; 0x89uy; 0x1duy; 0x87uy; 0xa6uy
  ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


///  Test 6

let test6_key : lbytes 131 =
  let l = List.Tot.map u8_from_UInt8 [
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy
  ] in
  assert_norm (List.Tot.length l == 131);
  of_list l


let test6_data : lbytes 54 =
  let l = List.Tot.map u8_from_UInt8 [
    0x54uy; 0x65uy; 0x73uy; 0x74uy; 0x20uy; 0x55uy; 0x73uy; 0x69uy;
    0x6euy; 0x67uy; 0x20uy; 0x4cuy; 0x61uy; 0x72uy; 0x67uy; 0x65uy;
    0x72uy; 0x20uy; 0x54uy; 0x68uy; 0x61uy; 0x6euy; 0x20uy; 0x42uy;
    0x6cuy; 0x6fuy; 0x63uy; 0x6buy; 0x2duy; 0x53uy; 0x69uy; 0x7auy;
    0x65uy; 0x20uy; 0x4buy; 0x65uy; 0x79uy; 0x20uy; 0x2duy; 0x20uy;
    0x48uy; 0x61uy; 0x73uy; 0x68uy; 0x20uy; 0x4buy; 0x65uy; 0x79uy;
    0x20uy; 0x46uy; 0x69uy; 0x72uy; 0x73uy; 0x74uy
  ] in
  assert_norm (List.Tot.length l == 54);
  of_list l


let test6_expected224 : lbytes 28 =
  let l = List.Tot.map u8_from_UInt8 [
    0x95uy; 0xe9uy; 0xa0uy; 0xdbuy; 0x96uy; 0x20uy; 0x95uy; 0xaduy;
    0xaeuy; 0xbeuy; 0x9buy; 0x2duy; 0x6fuy; 0x0duy; 0xbcuy; 0xe2uy;
    0xd4uy; 0x99uy; 0xf1uy; 0x12uy; 0xf2uy; 0xd2uy; 0xb7uy; 0x27uy;
    0x3fuy; 0xa6uy; 0x87uy; 0x0euy
  ] in
  assert_norm (List.Tot.length l == 28);
  of_list l


let test6_expected256 : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x60uy; 0xe4uy; 0x31uy; 0x59uy; 0x1euy; 0xe0uy; 0xb6uy; 0x7fuy;
    0x0duy; 0x8auy; 0x26uy; 0xaauy; 0xcbuy; 0xf5uy; 0xb7uy; 0x7fuy;
    0x8euy; 0x0buy; 0xc6uy; 0x21uy; 0x37uy; 0x28uy; 0xc5uy; 0x14uy;
    0x05uy; 0x46uy; 0x04uy; 0x0fuy; 0x0euy; 0xe3uy; 0x7fuy; 0x54uy
  ] in
  assert_norm (List.Tot.length l == 32);
  of_list l


let test6_expected384 : lbytes 48 =
  let l = List.Tot.map u8_from_UInt8 [
    0x4euy; 0xceuy; 0x08uy; 0x44uy; 0x85uy; 0x81uy; 0x3euy; 0x90uy;
    0x88uy; 0xd2uy; 0xc6uy; 0x3auy; 0x04uy; 0x1buy; 0xc5uy; 0xb4uy;
    0x4fuy; 0x9euy; 0xf1uy; 0x01uy; 0x2auy; 0x2buy; 0x58uy; 0x8fuy;
    0x3cuy; 0xd1uy; 0x1fuy; 0x05uy; 0x03uy; 0x3auy; 0xc4uy; 0xc6uy;
    0x0cuy; 0x2euy; 0xf6uy; 0xabuy; 0x40uy; 0x30uy; 0xfeuy; 0x82uy;
    0x96uy; 0x24uy; 0x8duy; 0xf1uy; 0x63uy; 0xf4uy; 0x49uy; 0x52uy
  ] in
  assert_norm (List.Tot.length l == 48);
  of_list l


let test6_expected512 : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x80uy; 0xb2uy; 0x42uy; 0x63uy; 0xc7uy; 0xc1uy; 0xa3uy; 0xebuy;
    0xb7uy; 0x14uy; 0x93uy; 0xc1uy; 0xdduy; 0x7buy; 0xe8uy; 0xb4uy;
    0x9buy; 0x46uy; 0xd1uy; 0xf4uy; 0x1buy; 0x4auy; 0xeeuy; 0xc1uy;
    0x12uy; 0x1buy; 0x01uy; 0x37uy; 0x83uy; 0xf8uy; 0xf3uy; 0x52uy;
    0x6buy; 0x56uy; 0xd0uy; 0x37uy; 0xe0uy; 0x5fuy; 0x25uy; 0x98uy;
    0xbduy; 0x0fuy; 0xd2uy; 0x21uy; 0x5duy; 0x6auy; 0x1euy; 0x52uy;
    0x95uy; 0xe6uy; 0x4fuy; 0x73uy; 0xf6uy; 0x3fuy; 0x0auy; 0xecuy;
    0x8buy; 0x91uy; 0x5auy; 0x98uy; 0x5duy; 0x78uy; 0x65uy; 0x98uy
  ] in
  assert_norm (List.Tot.length l == 64);
  of_list l


///  Test 7

let test7_key : lbytes 131 =
  let l = List.Tot.map u8_from_UInt8 [
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy; 0xaauy;
    0xaauy; 0xaauy; 0xaauy
  ] in
  assert_norm (List.Tot.length l == 131);
  of_list l


let test7_data : lbytes 152 =
  let l = List.Tot.map u8_from_UInt8 [
    0x54uy; 0x68uy; 0x69uy; 0x73uy; 0x20uy; 0x69uy; 0x73uy; 0x20uy;
    0x61uy; 0x20uy; 0x74uy; 0x65uy; 0x73uy; 0x74uy; 0x20uy; 0x75uy;
    0x73uy; 0x69uy; 0x6euy; 0x67uy; 0x20uy; 0x61uy; 0x20uy; 0x6cuy;
    0x61uy; 0x72uy; 0x67uy; 0x65uy; 0x72uy; 0x20uy; 0x74uy; 0x68uy;
    0x61uy; 0x6euy; 0x20uy; 0x62uy; 0x6cuy; 0x6fuy; 0x63uy; 0x6buy;
    0x2duy; 0x73uy; 0x69uy; 0x7auy; 0x65uy; 0x20uy; 0x6buy; 0x65uy;
    0x79uy; 0x20uy; 0x61uy; 0x6euy; 0x64uy; 0x20uy; 0x61uy; 0x20uy;
    0x6cuy; 0x61uy; 0x72uy; 0x67uy; 0x65uy; 0x72uy; 0x20uy; 0x74uy;
    0x68uy; 0x61uy; 0x6euy; 0x20uy; 0x62uy; 0x6cuy; 0x6fuy; 0x63uy;
    0x6buy; 0x2duy; 0x73uy; 0x69uy; 0x7auy; 0x65uy; 0x20uy; 0x64uy;
    0x61uy; 0x74uy; 0x61uy; 0x2euy; 0x20uy; 0x54uy; 0x68uy; 0x65uy;
    0x20uy; 0x6buy; 0x65uy; 0x79uy; 0x20uy; 0x6euy; 0x65uy; 0x65uy;
    0x64uy; 0x73uy; 0x20uy; 0x74uy; 0x6fuy; 0x20uy; 0x62uy; 0x65uy;
    0x20uy; 0x68uy; 0x61uy; 0x73uy; 0x68uy; 0x65uy; 0x64uy; 0x20uy;
    0x62uy; 0x65uy; 0x66uy; 0x6fuy; 0x72uy; 0x65uy; 0x20uy; 0x62uy;
    0x65uy; 0x69uy; 0x6euy; 0x67uy; 0x20uy; 0x75uy; 0x73uy; 0x65uy;
    0x64uy; 0x20uy; 0x62uy; 0x79uy; 0x20uy; 0x74uy; 0x68uy; 0x65uy;
    0x20uy; 0x48uy; 0x4duy; 0x41uy; 0x43uy; 0x20uy; 0x61uy; 0x6cuy;
    0x67uy; 0x6fuy; 0x72uy; 0x69uy; 0x74uy; 0x68uy; 0x6duy; 0x2euy
  ] in
  assert_norm (List.Tot.length l == 152);
  of_list l


let test7_expected224 : lbytes 28 =
  let l = List.Tot.map u8_from_UInt8 [
    0x3auy; 0x85uy; 0x41uy; 0x66uy; 0xacuy; 0x5duy; 0x9fuy; 0x02uy;
    0x3fuy; 0x54uy; 0xd5uy; 0x17uy; 0xd0uy; 0xb3uy; 0x9duy; 0xbduy;
    0x94uy; 0x67uy; 0x70uy; 0xdbuy; 0x9cuy; 0x2buy; 0x95uy; 0xc9uy;
    0xf6uy; 0xf5uy; 0x65uy; 0xd1uy
  ] in
  assert_norm (List.Tot.length l == 28);
  of_list l


let test7_expected256 : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x9buy; 0x09uy; 0xffuy; 0xa7uy; 0x1buy; 0x94uy; 0x2fuy; 0xcbuy;
    0x27uy; 0x63uy; 0x5fuy; 0xbcuy; 0xd5uy; 0xb0uy; 0xe9uy; 0x44uy;
    0xbfuy; 0xdcuy; 0x63uy; 0x64uy; 0x4fuy; 0x07uy; 0x13uy; 0x93uy;
    0x8auy; 0x7fuy; 0x51uy; 0x53uy; 0x5cuy; 0x3auy; 0x35uy; 0xe2uy
  ] in
  assert_norm (List.Tot.length l == 32);
  of_list l


let test7_expected384 : lbytes 48 =
  let l = List.Tot.map u8_from_UInt8 [
    0x66uy; 0x17uy; 0x17uy; 0x8euy; 0x94uy; 0x1fuy; 0x02uy; 0x0duy;
    0x35uy; 0x1euy; 0x2fuy; 0x25uy; 0x4euy; 0x8fuy; 0xd3uy; 0x2cuy;
    0x60uy; 0x24uy; 0x20uy; 0xfeuy; 0xb0uy; 0xb8uy; 0xfbuy; 0x9auy;
    0xdcuy; 0xceuy; 0xbbuy; 0x82uy; 0x46uy; 0x1euy; 0x99uy; 0xc5uy;
    0xa6uy; 0x78uy; 0xccuy; 0x31uy; 0xe7uy; 0x99uy; 0x17uy; 0x6duy;
    0x38uy; 0x60uy; 0xe6uy; 0x11uy; 0x0cuy; 0x46uy; 0x52uy; 0x3euy
  ] in
  assert_norm (List.Tot.length l == 48);
  of_list l


let test7_expected512 : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0xe3uy; 0x7buy; 0x6auy; 0x77uy; 0x5duy; 0xc8uy; 0x7duy; 0xbauy;
    0xa4uy; 0xdfuy; 0xa9uy; 0xf9uy; 0x6euy; 0x5euy; 0x3fuy; 0xfduy;
    0xdeuy; 0xbduy; 0x71uy; 0xf8uy; 0x86uy; 0x72uy; 0x89uy; 0x86uy;
    0x5duy; 0xf5uy; 0xa3uy; 0x2duy; 0x20uy; 0xcduy; 0xc9uy; 0x44uy;
    0xb6uy; 0x02uy; 0x2cuy; 0xacuy; 0x3cuy; 0x49uy; 0x82uy; 0xb1uy;
    0x0duy; 0x5euy; 0xebuy; 0x55uy; 0xc3uy; 0xe4uy; 0xdeuy; 0x15uy;
    0x13uy; 0x46uy; 0x76uy; 0xfbuy; 0x6duy; 0xe0uy; 0x44uy; 0x60uy;
    0x65uy; 0xc9uy; 0x74uy; 0x40uy; 0xfauy; 0x8cuy; 0x6auy; 0x58uy
  ] in
  assert_norm (List.Tot.length l == 64);
  of_list l


let _: squash (pow2 32 < pow2 61 /\ pow2 32 < pow2 125) =
  Math.Lemmas.pow2_lt_compat 61 32;
  Math.Lemmas.pow2_lt_compat 125 32


noeq type vec =
  | Vec :
     a:fixed_len_alg
    -> key:bytes{HMAC.keysized a (Seq.length key)}
    -> data:bytes{(Seq.length data + block_length a) `less_than_max_input_length` a}
    -> expected:bytes{length expected <= hash_length a} -> vec


let test_vectors : list vec = [
  Vec SHA2_224 test1_key test1_data test1_expected224;
  Vec SHA2_256 test1_key test1_data test1_expected256;
  Vec SHA2_384 test1_key test1_data test1_expected384;
  Vec SHA2_512 test1_key test1_data test1_expected512;

  Vec SHA2_224 test2_key test2_data test2_expected224;
  Vec SHA2_256 test2_key test2_data test2_expected256;
  Vec SHA2_384 test2_key test2_data test2_expected384;
  Vec SHA2_512 test2_key test2_data test2_expected512;

  Vec SHA2_224 test3_key test3_data test3_expected224;
  Vec SHA2_256 test3_key test3_data test3_expected256;
  Vec SHA2_384 test3_key test3_data test3_expected384;
  Vec SHA2_512 test3_key test3_data test3_expected512;

  Vec SHA2_224 test4_key test4_data test4_expected224;
  Vec SHA2_256 test4_key test4_data test4_expected256;
  Vec SHA2_384 test4_key test4_data test4_expected384;
  Vec SHA2_512 test4_key test4_data test4_expected512;

  Vec SHA2_224 test5_key test5_data test5_expected224;
  Vec SHA2_256 test5_key test5_data test5_expected256;
  Vec SHA2_384 test5_key test5_data test5_expected384;
  Vec SHA2_512 test5_key test5_data test5_expected512;

  Vec SHA2_224 test6_key test6_data test6_expected224;
  Vec SHA2_256 test6_key test6_data test6_expected256;
  Vec SHA2_384 test6_key test6_data test6_expected384;
  Vec SHA2_512 test6_key test6_data test6_expected512;

  Vec SHA2_224 test7_key test7_data test7_expected224;
  Vec SHA2_256 test7_key test7_data test7_expected256;
  Vec SHA2_384 test7_key test7_data test7_expected384;
  Vec SHA2_512 test7_key test7_data test7_expected512 ]


let test_one (v:vec) =
  let Vec a key data expected = v in
  let computed = Seq.slice (HMAC.hmac a key data) 0 (length expected) in
  PS.print_compare true (length expected) expected computed


let test () =
  let res = List.for_all test_one test_vectors in
  if res then begin IO.print_string "\n\nHMAC: Success!\n"; true end
  else begin IO.print_string "\n\nHMAC: Failure :(\n"; false end
