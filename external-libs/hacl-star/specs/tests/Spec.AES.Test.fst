module Spec.AES.Test

open FStar.Mul
open Lib.IntTypes
open Lib.RawIntTypes
open Lib.Sequence
open Lib.ByteSequence
module PS = Lib.PrintSequence

open Spec.AES

#set-options "--z3rlimit 50 --fuel 0 --ifuel 0"

let test_key : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x2buy; 0x7euy; 0x15uy; 0x16uy; 0x28uy; 0xaeuy; 0xd2uy; 0xa6uy;
    0xabuy; 0xf7uy; 0x15uy; 0x88uy; 0x09uy; 0xcfuy; 0x4fuy; 0x3cuy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test_nonce : lbytes 12  =
  let l = List.Tot.map u8_from_UInt8 [
    0xf0uy; 0xf1uy; 0xf2uy; 0xf3uy; 0xf4uy; 0xf5uy; 0xf6uy; 0xf7uy;
    0xf8uy; 0xf9uy; 0xfauy; 0xfbuy ] in
  assert_norm (List.Tot.length l == 12);
  of_list l

let test_counter = 0xfcfdfeff

let test_plaintext : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x6buy; 0xc1uy; 0xbeuy; 0xe2uy; 0x2euy; 0x40uy; 0x9fuy; 0x96uy;
    0xe9uy; 0x3duy; 0x7euy; 0x11uy; 0x73uy; 0x93uy; 0x17uy; 0x2auy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test_ciphertext : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x87uy; 0x4duy; 0x61uy; 0x91uy; 0xb6uy; 0x20uy; 0xe3uy; 0x26uy;
    0x1buy; 0xefuy; 0x68uy; 0x64uy; 0x99uy; 0x0duy; 0xb6uy; 0xceuy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l

(* From RFC 3686 *)
let test_key1 : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0xAEuy; 0x68uy; 0x52uy; 0xF8uy; 0x12uy; 0x10uy; 0x67uy; 0xCCuy;
    0x4Buy; 0xF7uy; 0xA5uy; 0x76uy; 0x55uy; 0x77uy; 0xF3uy; 0x9Euy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test_nonce1 : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x00uy; 0x00uy; 0x30uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l

let test_counter1 = 1

let test_plaintext1 : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x53uy; 0x69uy; 0x6Euy; 0x67uy; 0x6Cuy; 0x65uy; 0x20uy; 0x62uy;
    0x6Cuy; 0x6Fuy; 0x63uy; 0x6Buy; 0x20uy; 0x6Duy; 0x73uy; 0x67uy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test_ciphertext1 : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0xE4uy; 0x09uy; 0x5Duy; 0x4Fuy; 0xB7uy; 0xA7uy; 0xB3uy; 0x79uy;
    0x2Duy; 0x61uy; 0x75uy; 0xA3uy; 0x26uy; 0x13uy; 0x11uy; 0xB8uy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test_key2 : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x7Euy; 0x24uy; 0x06uy; 0x78uy; 0x17uy; 0xFAuy; 0xE0uy; 0xD7uy;
    0x43uy; 0xD6uy; 0xCEuy; 0x1Fuy; 0x32uy; 0x53uy; 0x91uy; 0x63uy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test_nonce2 : lbytes 12 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x6Cuy; 0xB6uy; 0xDBuy; 0xC0uy; 0x54uy; 0x3Buy; 0x59uy;
    0xDAuy; 0x48uy; 0xD9uy; 0x0Buy ] in
  assert_norm (List.Tot.length l == 12);
  of_list l

let test_counter2 = 1

let test_plaintext2 : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy ] in
  assert_norm (List.Tot.length l == 32);
  of_list l


let test_ciphertext2 : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x51uy; 0x04uy; 0xA1uy; 0x06uy; 0x16uy; 0x8Auy; 0x72uy; 0xD9uy;
    0x79uy; 0x0Duy; 0x41uy; 0xEEuy; 0x8Euy; 0xDAuy; 0xD3uy; 0x88uy;
    0xEBuy; 0x2Euy; 0x1Euy; 0xFCuy; 0x46uy; 0xDAuy; 0x57uy; 0xC8uy;
    0xFCuy; 0xE6uy; 0x30uy; 0xDFuy; 0x91uy; 0x41uy; 0xBEuy; 0x28uy ] in
  assert_norm (List.Tot.length l == 32);
  of_list l


let test1_key_block : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x80uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test1_plaintext_block : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test1_ciphertext_block : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x0euy; 0xdduy; 0x33uy; 0xd3uy; 0xc6uy; 0x21uy; 0xe5uy; 0x46uy;
    0x45uy; 0x5buy; 0xd8uy; 0xbauy; 0x14uy; 0x18uy; 0xbeuy; 0xc8uy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test2_key_block : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0xffuy; 0xffuy; 0xffuy; 0xffuy; 0xffuy; 0xf0uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test2_plaintext_block : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test2_ciphertext_block : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0xe6uy; 0xc4uy; 0x80uy; 0x7auy; 0xe1uy; 0x1fuy; 0x36uy; 0xf0uy;
    0x91uy; 0xc5uy; 0x7duy; 0x9fuy; 0xb6uy; 0x85uy; 0x48uy; 0xd1uy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test3_key_block : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0xfeuy; 0xffuy; 0xe9uy; 0x92uy; 0x86uy; 0x65uy; 0x73uy; 0x1cuy;
    0x6duy; 0x6auy; 0x8fuy; 0x94uy; 0x67uy; 0x30uy; 0x83uy; 0x08uy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test3_ciphertext_block : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0xb8uy; 0x3buy; 0x53uy; 0x37uy; 0x08uy; 0xbfuy; 0x53uy; 0x5duy;
    0x0auy; 0xa6uy; 0xe5uy; 0x29uy; 0x80uy; 0xd5uy; 0x3buy; 0x78uy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test1_input_key1 : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x60uy; 0x3duy; 0xebuy; 0x10uy; 0x15uy; 0xcauy; 0x71uy; 0xbeuy;
    0x2buy; 0x73uy; 0xaeuy; 0xf0uy; 0x85uy; 0x7duy; 0x77uy; 0x81uy;
    0x1fuy; 0x35uy; 0x2cuy; 0x07uy; 0x3buy; 0x61uy; 0x08uy; 0xd7uy;
    0x2duy; 0x98uy; 0x10uy; 0xa3uy; 0x09uy; 0x14uy; 0xdfuy; 0xf4uy ] in
  assert_norm (List.Tot.length l == 32);
  of_list l


let test1_output_expanded : lbytes 240 =
  let l = List.Tot.map u8_from_UInt8 [
    0x60uy; 0x3duy; 0xebuy; 0x10uy; 0x15uy; 0xcauy; 0x71uy; 0xbeuy;
    0x2buy; 0x73uy; 0xaeuy; 0xf0uy; 0x85uy; 0x7duy; 0x77uy; 0x81uy;
    0x1fuy; 0x35uy; 0x2cuy; 0x07uy; 0x3buy; 0x61uy; 0x08uy; 0xd7uy;
    0x2duy; 0x98uy; 0x10uy; 0xa3uy; 0x09uy; 0x14uy; 0xdfuy; 0xf4uy;
    0x9buy; 0xa3uy; 0x54uy; 0x11uy; 0x8euy; 0x69uy; 0x25uy; 0xafuy;
    0xa5uy; 0x1auy; 0x8buy; 0x5fuy; 0x20uy; 0x67uy; 0xfcuy; 0xdeuy;
    0xa8uy; 0xb0uy; 0x9cuy; 0x1auy; 0x93uy; 0xd1uy; 0x94uy; 0xcduy;
    0xbeuy; 0x49uy; 0x84uy; 0x6euy; 0xb7uy; 0x5duy; 0x5buy; 0x9auy;
    0xd5uy; 0x9auy; 0xecuy; 0xb8uy; 0x5buy; 0xf3uy; 0xc9uy; 0x17uy;
    0xfeuy; 0xe9uy; 0x42uy; 0x48uy; 0xdeuy; 0x8euy; 0xbeuy; 0x96uy;
    0xb5uy; 0xa9uy; 0x32uy; 0x8auy; 0x26uy; 0x78uy; 0xa6uy; 0x47uy;
    0x98uy; 0x31uy; 0x22uy; 0x29uy; 0x2fuy; 0x6cuy; 0x79uy; 0xb3uy;
    0x81uy; 0x2cuy; 0x81uy; 0xaduy; 0xdauy; 0xdfuy; 0x48uy; 0xbauy;
    0x24uy; 0x36uy; 0x0auy; 0xf2uy; 0xfauy; 0xb8uy; 0xb4uy; 0x64uy;
    0x98uy; 0xc5uy; 0xbfuy; 0xc9uy; 0xbeuy; 0xbduy; 0x19uy; 0x8euy;
    0x26uy; 0x8cuy; 0x3buy; 0xa7uy; 0x09uy; 0xe0uy; 0x42uy; 0x14uy;
    0x68uy; 0x00uy; 0x7buy; 0xacuy; 0xb2uy; 0xdfuy; 0x33uy; 0x16uy;
    0x96uy; 0xe9uy; 0x39uy; 0xe4uy; 0x6cuy; 0x51uy; 0x8duy; 0x80uy;
    0xc8uy; 0x14uy; 0xe2uy; 0x04uy; 0x76uy; 0xa9uy; 0xfbuy; 0x8auy;
    0x50uy; 0x25uy; 0xc0uy; 0x2duy; 0x59uy; 0xc5uy; 0x82uy; 0x39uy;
    0xdeuy; 0x13uy; 0x69uy; 0x67uy; 0x6cuy; 0xccuy; 0x5auy; 0x71uy;
    0xfauy; 0x25uy; 0x63uy; 0x95uy; 0x96uy; 0x74uy; 0xeeuy; 0x15uy;
    0x58uy; 0x86uy; 0xcauy; 0x5duy; 0x2euy; 0x2fuy; 0x31uy; 0xd7uy;
    0x7euy; 0x0auy; 0xf1uy; 0xfauy; 0x27uy; 0xcfuy; 0x73uy; 0xc3uy;
    0x74uy; 0x9cuy; 0x47uy; 0xabuy; 0x18uy; 0x50uy; 0x1duy; 0xdauy;
    0xe2uy; 0x75uy; 0x7euy; 0x4fuy; 0x74uy; 0x01uy; 0x90uy; 0x5auy;
    0xcauy; 0xfauy; 0xaauy; 0xe3uy; 0xe4uy; 0xd5uy; 0x9buy; 0x34uy;
    0x9auy; 0xdfuy; 0x6auy; 0xceuy; 0xbduy; 0x10uy; 0x19uy; 0x0duy;
    0xfeuy; 0x48uy; 0x90uy; 0xd1uy; 0xe6uy; 0x18uy; 0x8duy; 0x0buy;
    0x04uy; 0x6duy; 0xf3uy; 0x44uy; 0x70uy; 0x6cuy; 0x63uy; 0x1euy
  ] in
  assert_norm (List.Tot.length l == 240);
  of_list l


let test2_input_key : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0auy; 0x0buy; 0x0cuy; 0x0duy; 0x0euy; 0x0fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1auy; 0x1buy; 0x1cuy; 0x1duy; 0x1euy; 0x1fuy ] in
  assert_norm (List.Tot.length l == 32);
  of_list l


let test2_input_plaintext : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x11uy; 0x22uy; 0x33uy; 0x44uy; 0x55uy; 0x66uy; 0x77uy;
    0x88uy; 0x99uy; 0xaauy; 0xbbuy; 0xccuy; 0xdduy; 0xeeuy; 0xffuy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test2_output_ciphertext : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x8euy; 0xa2uy; 0xb7uy; 0xcauy; 0x51uy; 0x67uy; 0x45uy; 0xbfuy;
    0xeauy; 0xfcuy; 0x49uy; 0x90uy; 0x4buy; 0x49uy; 0x60uy; 0x89uy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test3_input_key : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0xc4uy; 0x7buy; 0x02uy; 0x94uy; 0xdbuy; 0xbbuy; 0xeeuy; 0x0fuy;
    0xecuy; 0x47uy; 0x57uy; 0xf2uy; 0x2fuy; 0xfeuy; 0xeeuy; 0x35uy;
    0x87uy; 0xcauy; 0x47uy; 0x30uy; 0xc3uy; 0xd3uy; 0x3buy; 0x69uy;
    0x1duy; 0xf3uy; 0x8buy; 0xabuy; 0x07uy; 0x6buy; 0xc5uy; 0x58uy ] in
  assert_norm (List.Tot.length l == 32);
  of_list l


let test3_input_plaintext : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test3_output_ciphertext : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x46uy; 0xf2uy; 0xfbuy; 0x34uy; 0x2duy; 0x6fuy; 0x0auy; 0xb4uy;
    0x77uy; 0x47uy; 0x6fuy; 0xc5uy; 0x01uy; 0x24uy; 0x2cuy; 0x5fuy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test4_input_key : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0xccuy; 0xd1uy; 0xbcuy; 0x3cuy; 0x65uy; 0x9cuy; 0xd3uy; 0xc5uy;
    0x9buy; 0xc4uy; 0x37uy; 0x48uy; 0x4euy; 0x3cuy; 0x5cuy; 0x72uy;
    0x44uy; 0x41uy; 0xdauy; 0x8duy; 0x6euy; 0x90uy; 0xceuy; 0x55uy;
    0x6cuy; 0xd5uy; 0x7duy; 0x07uy; 0x52uy; 0x66uy; 0x3buy; 0xbcuy ] in
  assert_norm (List.Tot.length l == 32);
  of_list l


let test4_input_plaintext : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let test4_output_ciphertext : lbytes 16 =
  let l = List.Tot.map u8_from_UInt8 [
    0x30uy; 0x4fuy; 0x81uy; 0xabuy; 0x61uy; 0xa8uy; 0x0cuy; 0x2euy;
    0x74uy; 0x3buy; 0x94uy; 0xd5uy; 0x00uy; 0x2auy; 0x12uy; 0x6buy ] in
  assert_norm (List.Tot.length l == 16);
  of_list l


let print_sbox () : FStar.All.ML unit =
  let seq = create 256 (u8 0) in
  let seqi = Lib.LoopCombinators.repeati #(lseq uint8 256) 256 (fun i s -> s.[i] <- u8 i) seq in
  (*
  let inv = map (fun s -> from_elem (finv (to_elem s))) seqi in
  IO.print_string "inv i:     \n";
  FStar.List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a)); IO.print_string " ; ") (to_list #uint8 #256 inv);
  IO.print_string "\n";
  *)
  let seqsbox = map (fun s -> sub_byte s) seqi in
  IO.print_string "sbox i:     \n";
  FStar.List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a)); IO.print_string " ; ") (to_list #uint8 seqsbox);
  IO.print_string "\n"
(*
  let seqsbox_16 = map (fun s -> sbox_bp_16 s) seqi in
  IO.print_string "sbox bp_i i:\n";
  FStar.List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a)); IO.print_string " ; ") (to_list #uint8 seqsbox_16);
  IO.print_string "\n";
  *)


noeq type vec =
  | Vec :
    v:variant
    -> key:aes_key v
    -> nonce:bytes{length nonce <= 16}
    -> c:size_nat
    -> msg:bytes{length msg / 16 + c <= max_size_t}
    -> expected:bytes{length msg = length expected /\ length msg <= max_size_t} -> vec
  | Vec_block :
    v:variant
    -> key:aes_key v
    -> plain:block
    -> expected:block -> vec


let test_vectors : list vec = [
  Vec AES128 test_key test_nonce test_counter test_plaintext test_ciphertext;
  Vec AES128 test_key1 test_nonce1 test_counter1 test_plaintext1 test_ciphertext1;
  Vec AES128 test_key2 test_nonce2 test_counter2 test_plaintext2 test_ciphertext2;

  Vec_block AES128 test1_key_block test1_plaintext_block test1_ciphertext_block;
  Vec_block AES128 test2_key_block test2_plaintext_block test2_ciphertext_block;
  Vec_block AES128 test3_key_block test2_plaintext_block test3_ciphertext_block;
  Vec_block AES256 test2_input_key test2_input_plaintext test2_output_ciphertext;
  Vec_block AES256 test3_input_key test3_input_plaintext test3_output_ciphertext;
  Vec_block AES256 test4_input_key test4_input_plaintext test4_output_ciphertext
]


#set-options "--ifuel 1"

let test_one_encrypt (v:vec) =
  let expected =
    match v with
    | Vec v key nonce counter plain expected -> expected
    | Vec_block v key plain expected -> expected in

  let computed =
    match v with
    | Vec v key nonce counter plain expected ->
      aes_ctr_encrypt_bytes v key (length nonce) nonce counter plain
    | Vec_block v key plain expected ->
      aes_encrypt_block v (aes_key_expansion v key) plain in

  PS.print_compare true (length expected) computed expected


let test_one_decrypt (v:vec) =
  let expected =
    match v with
    | Vec v key nonce counter plain expected -> plain
    | Vec_block v key plain expected -> plain in

  let computed =
    match v with
    | Vec v key nonce counter plain expected ->
      aes_ctr_encrypt_bytes v key (length nonce) nonce counter expected
    | Vec_block v key plain expected ->
      aes_decrypt_block v (aes_dec_key_expansion v key) expected in

  PS.print_compare true (length expected) computed expected


let test() : FStar.All.ML bool =
  // print_sbox (); // TODO: rm?

  IO.print_string "\n\nAES Encryption\n";
  let res_enc = List.for_all (fun (v:vec) -> test_one_encrypt v) test_vectors in
  IO.print_string "\n\nAES Decryption\n";
  let res_dec = List.for_all (fun (v:vec) -> test_one_decrypt v) test_vectors in
  IO.print_string "\n\nAES Key Expansion\n";
  let computed1 = aes_key_expansion AES256 test1_input_key1 in
  let res_key = PS.print_compare true (length computed1) test1_output_expanded computed1 in

  let res = res_enc && res_dec && res_key in
  if res then begin IO.print_string "\n\nAES: Success!\n"; true end
  else begin IO.print_string "\n\nAES: Failure :(\n"; false end
